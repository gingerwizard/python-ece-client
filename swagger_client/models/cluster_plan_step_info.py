# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClusterPlanStepInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'step_id': 'str',
        'started': 'datetime',
        'completed': 'datetime',
        'duration_in_millis': 'int',
        'status': 'str',
        'stage': 'str',
        'info_log': 'list[ClusterPlanStepLogMessageInfo]'
    }

    attribute_map = {
        'step_id': 'step_id',
        'started': 'started',
        'completed': 'completed',
        'duration_in_millis': 'duration_in_millis',
        'status': 'status',
        'stage': 'stage',
        'info_log': 'info_log'
    }

    def __init__(self, step_id=None, started=None, completed=None, duration_in_millis=None, status=None, stage=None, info_log=None):
        """
        ClusterPlanStepInfo - a model defined in Swagger
        """

        self._step_id = None
        self._started = None
        self._completed = None
        self._duration_in_millis = None
        self._status = None
        self._stage = None
        self._info_log = None

        self.step_id = step_id
        self.started = started
        if completed is not None:
          self.completed = completed
        if duration_in_millis is not None:
          self.duration_in_millis = duration_in_millis
        self.status = status
        self.stage = stage
        self.info_log = info_log

    @property
    def step_id(self):
        """
        Gets the step_id of this ClusterPlanStepInfo.
        ID of current step

        :return: The step_id of this ClusterPlanStepInfo.
        :rtype: str
        """
        return self._step_id

    @step_id.setter
    def step_id(self, step_id):
        """
        Sets the step_id of this ClusterPlanStepInfo.
        ID of current step

        :param step_id: The step_id of this ClusterPlanStepInfo.
        :type: str
        """
        if step_id is None:
            raise ValueError("Invalid value for `step_id`, must not be `None`")

        self._step_id = step_id

    @property
    def started(self):
        """
        Gets the started of this ClusterPlanStepInfo.
        When the step started (ISO format in UTC)

        :return: The started of this ClusterPlanStepInfo.
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """
        Sets the started of this ClusterPlanStepInfo.
        When the step started (ISO format in UTC)

        :param started: The started of this ClusterPlanStepInfo.
        :type: datetime
        """
        if started is None:
            raise ValueError("Invalid value for `started`, must not be `None`")

        self._started = started

    @property
    def completed(self):
        """
        Gets the completed of this ClusterPlanStepInfo.
        When the step completed (ISO format in UTC)

        :return: The completed of this ClusterPlanStepInfo.
        :rtype: datetime
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """
        Sets the completed of this ClusterPlanStepInfo.
        When the step completed (ISO format in UTC)

        :param completed: The completed of this ClusterPlanStepInfo.
        :type: datetime
        """

        self._completed = completed

    @property
    def duration_in_millis(self):
        """
        Gets the duration_in_millis of this ClusterPlanStepInfo.
        The duration of the step in MS

        :return: The duration_in_millis of this ClusterPlanStepInfo.
        :rtype: int
        """
        return self._duration_in_millis

    @duration_in_millis.setter
    def duration_in_millis(self, duration_in_millis):
        """
        Sets the duration_in_millis of this ClusterPlanStepInfo.
        The duration of the step in MS

        :param duration_in_millis: The duration_in_millis of this ClusterPlanStepInfo.
        :type: int
        """

        self._duration_in_millis = duration_in_millis

    @property
    def status(self):
        """
        Gets the status of this ClusterPlanStepInfo.
        The status of the step (success, warning, error - warning means something didn't go as expected but it was not serious enough to abort the plan)

        :return: The status of this ClusterPlanStepInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ClusterPlanStepInfo.
        The status of the step (success, warning, error - warning means something didn't go as expected but it was not serious enough to abort the plan)

        :param status: The status of this ClusterPlanStepInfo.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")
        allowed_values = ["success", "warning", "error", "pending"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def stage(self):
        """
        Gets the stage of this ClusterPlanStepInfo.
        Current stage that the step is in

        :return: The stage of this ClusterPlanStepInfo.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """
        Sets the stage of this ClusterPlanStepInfo.
        Current stage that the step is in

        :param stage: The stage of this ClusterPlanStepInfo.
        :type: str
        """
        if stage is None:
            raise ValueError("Invalid value for `stage`, must not be `None`")
        allowed_values = ["starting", "completed", "in_progress"]
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"
                .format(stage, allowed_values)
            )

        self._stage = stage

    @property
    def info_log(self):
        """
        Gets the info_log of this ClusterPlanStepInfo.
        Human readable summaries of the step, including messages for each stage of the step

        :return: The info_log of this ClusterPlanStepInfo.
        :rtype: list[ClusterPlanStepLogMessageInfo]
        """
        return self._info_log

    @info_log.setter
    def info_log(self, info_log):
        """
        Sets the info_log of this ClusterPlanStepInfo.
        Human readable summaries of the step, including messages for each stage of the step

        :param info_log: The info_log of this ClusterPlanStepInfo.
        :type: list[ClusterPlanStepLogMessageInfo]
        """
        if info_log is None:
            raise ValueError("Invalid value for `info_log`, must not be `None`")

        self._info_log = info_log

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClusterPlanStepInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
