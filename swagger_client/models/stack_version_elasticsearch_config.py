# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StackVersionElasticsearchConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'docker_image': 'str',
        'plugins': 'list[str]',
        'default_plugins': 'list[str]',
        'blacklist': 'list[str]'
    }

    attribute_map = {
        'docker_image': 'docker_image',
        'plugins': 'plugins',
        'default_plugins': 'default_plugins',
        'blacklist': 'blacklist'
    }

    def __init__(self, docker_image=None, plugins=None, default_plugins=None, blacklist=None):
        """
        StackVersionElasticsearchConfig - a model defined in Swagger
        """

        self._docker_image = None
        self._plugins = None
        self._default_plugins = None
        self._blacklist = None

        self.docker_image = docker_image
        self.plugins = plugins
        self.default_plugins = default_plugins
        self.blacklist = blacklist

    @property
    def docker_image(self):
        """
        Gets the docker_image of this StackVersionElasticsearchConfig.
        Docker image for the Elasticsearch

        :return: The docker_image of this StackVersionElasticsearchConfig.
        :rtype: str
        """
        return self._docker_image

    @docker_image.setter
    def docker_image(self, docker_image):
        """
        Sets the docker_image of this StackVersionElasticsearchConfig.
        Docker image for the Elasticsearch

        :param docker_image: The docker_image of this StackVersionElasticsearchConfig.
        :type: str
        """
        if docker_image is None:
            raise ValueError("Invalid value for `docker_image`, must not be `None`")

        self._docker_image = docker_image

    @property
    def plugins(self):
        """
        Gets the plugins of this StackVersionElasticsearchConfig.
        List of available plugins

        :return: The plugins of this StackVersionElasticsearchConfig.
        :rtype: list[str]
        """
        return self._plugins

    @plugins.setter
    def plugins(self, plugins):
        """
        Sets the plugins of this StackVersionElasticsearchConfig.
        List of available plugins

        :param plugins: The plugins of this StackVersionElasticsearchConfig.
        :type: list[str]
        """
        if plugins is None:
            raise ValueError("Invalid value for `plugins`, must not be `None`")

        self._plugins = plugins

    @property
    def default_plugins(self):
        """
        Gets the default_plugins of this StackVersionElasticsearchConfig.
        List of default plugins

        :return: The default_plugins of this StackVersionElasticsearchConfig.
        :rtype: list[str]
        """
        return self._default_plugins

    @default_plugins.setter
    def default_plugins(self, default_plugins):
        """
        Sets the default_plugins of this StackVersionElasticsearchConfig.
        List of default plugins

        :param default_plugins: The default_plugins of this StackVersionElasticsearchConfig.
        :type: list[str]
        """
        if default_plugins is None:
            raise ValueError("Invalid value for `default_plugins`, must not be `None`")

        self._default_plugins = default_plugins

    @property
    def blacklist(self):
        """
        Gets the blacklist of this StackVersionElasticsearchConfig.
        List of configuration options that cannot be overridden by user settings

        :return: The blacklist of this StackVersionElasticsearchConfig.
        :rtype: list[str]
        """
        return self._blacklist

    @blacklist.setter
    def blacklist(self, blacklist):
        """
        Sets the blacklist of this StackVersionElasticsearchConfig.
        List of configuration options that cannot be overridden by user settings

        :param blacklist: The blacklist of this StackVersionElasticsearchConfig.
        :type: list[str]
        """
        if blacklist is None:
            raise ValueError("Invalid value for `blacklist`, must not be `None`")

        self._blacklist = blacklist

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StackVersionElasticsearchConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
