# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PlanStrategy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rolling': 'RollingStrategyConfig',
        'grow_and_shrink': 'GrowShrinkStrategyConfig',
        'rolling_grow_and_shrink': 'RollingGrowShrinkStrategyConfig'
    }

    attribute_map = {
        'rolling': 'rolling',
        'grow_and_shrink': 'grow_and_shrink',
        'rolling_grow_and_shrink': 'rolling_grow_and_shrink'
    }

    def __init__(self, rolling=None, grow_and_shrink=None, rolling_grow_and_shrink=None):
        """
        PlanStrategy - a model defined in Swagger
        """

        self._rolling = None
        self._grow_and_shrink = None
        self._rolling_grow_and_shrink = None

        if rolling is not None:
          self.rolling = rolling
        if grow_and_shrink is not None:
          self.grow_and_shrink = grow_and_shrink
        if rolling_grow_and_shrink is not None:
          self.rolling_grow_and_shrink = rolling_grow_and_shrink

    @property
    def rolling(self):
        """
        Gets the rolling of this PlanStrategy.

        :return: The rolling of this PlanStrategy.
        :rtype: RollingStrategyConfig
        """
        return self._rolling

    @rolling.setter
    def rolling(self, rolling):
        """
        Sets the rolling of this PlanStrategy.

        :param rolling: The rolling of this PlanStrategy.
        :type: RollingStrategyConfig
        """

        self._rolling = rolling

    @property
    def grow_and_shrink(self):
        """
        Gets the grow_and_shrink of this PlanStrategy.

        :return: The grow_and_shrink of this PlanStrategy.
        :rtype: GrowShrinkStrategyConfig
        """
        return self._grow_and_shrink

    @grow_and_shrink.setter
    def grow_and_shrink(self, grow_and_shrink):
        """
        Sets the grow_and_shrink of this PlanStrategy.

        :param grow_and_shrink: The grow_and_shrink of this PlanStrategy.
        :type: GrowShrinkStrategyConfig
        """

        self._grow_and_shrink = grow_and_shrink

    @property
    def rolling_grow_and_shrink(self):
        """
        Gets the rolling_grow_and_shrink of this PlanStrategy.

        :return: The rolling_grow_and_shrink of this PlanStrategy.
        :rtype: RollingGrowShrinkStrategyConfig
        """
        return self._rolling_grow_and_shrink

    @rolling_grow_and_shrink.setter
    def rolling_grow_and_shrink(self, rolling_grow_and_shrink):
        """
        Sets the rolling_grow_and_shrink of this PlanStrategy.

        :param rolling_grow_and_shrink: The rolling_grow_and_shrink of this PlanStrategy.
        :type: RollingGrowShrinkStrategyConfig
        """

        self._rolling_grow_and_shrink = rolling_grow_and_shrink

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PlanStrategy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
