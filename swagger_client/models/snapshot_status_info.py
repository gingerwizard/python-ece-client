# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SnapshotStatusInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'healthy': 'bool',
        'count': 'int',
        'latest_successful': 'bool',
        'latest_status': 'str',
        'scheduled_time': 'datetime',
        'latest_end_time': 'datetime',
        'latest_successful_end_time': 'datetime'
    }

    attribute_map = {
        'healthy': 'healthy',
        'count': 'count',
        'latest_successful': 'latest_successful',
        'latest_status': 'latest_status',
        'scheduled_time': 'scheduled_time',
        'latest_end_time': 'latest_end_time',
        'latest_successful_end_time': 'latest_successful_end_time'
    }

    def __init__(self, healthy=None, count=None, latest_successful=None, latest_status=None, scheduled_time=None, latest_end_time=None, latest_successful_end_time=None):
        """
        SnapshotStatusInfo - a model defined in Swagger
        """

        self._healthy = None
        self._count = None
        self._latest_successful = None
        self._latest_status = None
        self._scheduled_time = None
        self._latest_end_time = None
        self._latest_successful_end_time = None

        self.healthy = healthy
        self.count = count
        if latest_successful is not None:
          self.latest_successful = latest_successful
        if latest_status is not None:
          self.latest_status = latest_status
        if scheduled_time is not None:
          self.scheduled_time = scheduled_time
        if latest_end_time is not None:
          self.latest_end_time = latest_end_time
        if latest_successful_end_time is not None:
          self.latest_successful_end_time = latest_successful_end_time

    @property
    def healthy(self):
        """
        Gets the healthy of this SnapshotStatusInfo.
        Health status of snapshots for this cluster

        :return: The healthy of this SnapshotStatusInfo.
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """
        Sets the healthy of this SnapshotStatusInfo.
        Health status of snapshots for this cluster

        :param healthy: The healthy of this SnapshotStatusInfo.
        :type: bool
        """
        if healthy is None:
            raise ValueError("Invalid value for `healthy`, must not be `None`")

        self._healthy = healthy

    @property
    def count(self):
        """
        Gets the count of this SnapshotStatusInfo.
        Number of snapshots stored for this cluster

        :return: The count of this SnapshotStatusInfo.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this SnapshotStatusInfo.
        Number of snapshots stored for this cluster

        :param count: The count of this SnapshotStatusInfo.
        :type: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def latest_successful(self):
        """
        Gets the latest_successful of this SnapshotStatusInfo.
        Latest snapshot status

        :return: The latest_successful of this SnapshotStatusInfo.
        :rtype: bool
        """
        return self._latest_successful

    @latest_successful.setter
    def latest_successful(self, latest_successful):
        """
        Sets the latest_successful of this SnapshotStatusInfo.
        Latest snapshot status

        :param latest_successful: The latest_successful of this SnapshotStatusInfo.
        :type: bool
        """

        self._latest_successful = latest_successful

    @property
    def latest_status(self):
        """
        Gets the latest_status of this SnapshotStatusInfo.
        Status of the latest snapshot attempt, if any exist.

        :return: The latest_status of this SnapshotStatusInfo.
        :rtype: str
        """
        return self._latest_status

    @latest_status.setter
    def latest_status(self, latest_status):
        """
        Sets the latest_status of this SnapshotStatusInfo.
        Status of the latest snapshot attempt, if any exist.

        :param latest_status: The latest_status of this SnapshotStatusInfo.
        :type: str
        """

        self._latest_status = latest_status

    @property
    def scheduled_time(self):
        """
        Gets the scheduled_time of this SnapshotStatusInfo.
        Scheduled time of next snapshot attempt

        :return: The scheduled_time of this SnapshotStatusInfo.
        :rtype: datetime
        """
        return self._scheduled_time

    @scheduled_time.setter
    def scheduled_time(self, scheduled_time):
        """
        Sets the scheduled_time of this SnapshotStatusInfo.
        Scheduled time of next snapshot attempt

        :param scheduled_time: The scheduled_time of this SnapshotStatusInfo.
        :type: datetime
        """

        self._scheduled_time = scheduled_time

    @property
    def latest_end_time(self):
        """
        Gets the latest_end_time of this SnapshotStatusInfo.
        The end time of the most recently attempted snapshot

        :return: The latest_end_time of this SnapshotStatusInfo.
        :rtype: datetime
        """
        return self._latest_end_time

    @latest_end_time.setter
    def latest_end_time(self, latest_end_time):
        """
        Sets the latest_end_time of this SnapshotStatusInfo.
        The end time of the most recently attempted snapshot

        :param latest_end_time: The latest_end_time of this SnapshotStatusInfo.
        :type: datetime
        """

        self._latest_end_time = latest_end_time

    @property
    def latest_successful_end_time(self):
        """
        Gets the latest_successful_end_time of this SnapshotStatusInfo.
        The end time of the most recently successful snapshot

        :return: The latest_successful_end_time of this SnapshotStatusInfo.
        :rtype: datetime
        """
        return self._latest_successful_end_time

    @latest_successful_end_time.setter
    def latest_successful_end_time(self, latest_successful_end_time):
        """
        Sets the latest_successful_end_time of this SnapshotStatusInfo.
        The end time of the most recently successful snapshot

        :param latest_successful_end_time: The latest_successful_end_time of this SnapshotStatusInfo.
        :type: datetime
        """

        self._latest_successful_end_time = latest_successful_end_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SnapshotStatusInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
