# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class KibanaClusterInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'cluster_name': 'str',
        'elasticsearch_cluster': 'TargetElasticsearchCluster',
        'healthy': 'bool',
        'status': 'str',
        'plan_info': 'KibanaClusterPlansInfo',
        'metadata': 'ClusterMetadataInfo',
        'topology': 'ClusterTopologyInfo',
        'external_links': 'list[ExternalHyperlink]',
        'links': 'dict(str, Hyperlink)'
    }

    attribute_map = {
        'cluster_id': 'cluster_id',
        'cluster_name': 'cluster_name',
        'elasticsearch_cluster': 'elasticsearch_cluster',
        'healthy': 'healthy',
        'status': 'status',
        'plan_info': 'plan_info',
        'metadata': 'metadata',
        'topology': 'topology',
        'external_links': 'external_links',
        'links': 'links'
    }

    def __init__(self, cluster_id=None, cluster_name=None, elasticsearch_cluster=None, healthy=None, status=None, plan_info=None, metadata=None, topology=None, external_links=None, links=None):
        """
        KibanaClusterInfo - a model defined in Swagger
        """

        self._cluster_id = None
        self._cluster_name = None
        self._elasticsearch_cluster = None
        self._healthy = None
        self._status = None
        self._plan_info = None
        self._metadata = None
        self._topology = None
        self._external_links = None
        self._links = None

        self.cluster_id = cluster_id
        self.cluster_name = cluster_name
        self.elasticsearch_cluster = elasticsearch_cluster
        self.healthy = healthy
        if status is not None:
          self.status = status
        self.plan_info = plan_info
        self.metadata = metadata
        self.topology = topology
        self.external_links = external_links
        if links is not None:
          self.links = links

    @property
    def cluster_id(self):
        """
        Gets the cluster_id of this KibanaClusterInfo.
        The id of the cluster

        :return: The cluster_id of this KibanaClusterInfo.
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """
        Sets the cluster_id of this KibanaClusterInfo.
        The id of the cluster

        :param cluster_id: The cluster_id of this KibanaClusterInfo.
        :type: str
        """
        if cluster_id is None:
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")

        self._cluster_id = cluster_id

    @property
    def cluster_name(self):
        """
        Gets the cluster_name of this KibanaClusterInfo.
        The name of the cluster

        :return: The cluster_name of this KibanaClusterInfo.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """
        Sets the cluster_name of this KibanaClusterInfo.
        The name of the cluster

        :param cluster_name: The cluster_name of this KibanaClusterInfo.
        :type: str
        """
        if cluster_name is None:
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")

        self._cluster_name = cluster_name

    @property
    def elasticsearch_cluster(self):
        """
        Gets the elasticsearch_cluster of this KibanaClusterInfo.

        :return: The elasticsearch_cluster of this KibanaClusterInfo.
        :rtype: TargetElasticsearchCluster
        """
        return self._elasticsearch_cluster

    @elasticsearch_cluster.setter
    def elasticsearch_cluster(self, elasticsearch_cluster):
        """
        Sets the elasticsearch_cluster of this KibanaClusterInfo.

        :param elasticsearch_cluster: The elasticsearch_cluster of this KibanaClusterInfo.
        :type: TargetElasticsearchCluster
        """
        if elasticsearch_cluster is None:
            raise ValueError("Invalid value for `elasticsearch_cluster`, must not be `None`")

        self._elasticsearch_cluster = elasticsearch_cluster

    @property
    def healthy(self):
        """
        Gets the healthy of this KibanaClusterInfo.
        Whether the cluster is healthy or not (one or more of the info subsections will have healthy: false)

        :return: The healthy of this KibanaClusterInfo.
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """
        Sets the healthy of this KibanaClusterInfo.
        Whether the cluster is healthy or not (one or more of the info subsections will have healthy: false)

        :param healthy: The healthy of this KibanaClusterInfo.
        :type: bool
        """
        if healthy is None:
            raise ValueError("Invalid value for `healthy`, must not be `None`")

        self._healthy = healthy

    @property
    def status(self):
        """
        Gets the status of this KibanaClusterInfo.
        Cluster status

        :return: The status of this KibanaClusterInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this KibanaClusterInfo.
        Cluster status

        :param status: The status of this KibanaClusterInfo.
        :type: str
        """
        allowed_values = ["Initializing", "Stopping", "Stopped", "Rebooting", "Restarting", "Reconfiguring", "Started"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def plan_info(self):
        """
        Gets the plan_info of this KibanaClusterInfo.

        :return: The plan_info of this KibanaClusterInfo.
        :rtype: KibanaClusterPlansInfo
        """
        return self._plan_info

    @plan_info.setter
    def plan_info(self, plan_info):
        """
        Sets the plan_info of this KibanaClusterInfo.

        :param plan_info: The plan_info of this KibanaClusterInfo.
        :type: KibanaClusterPlansInfo
        """
        if plan_info is None:
            raise ValueError("Invalid value for `plan_info`, must not be `None`")

        self._plan_info = plan_info

    @property
    def metadata(self):
        """
        Gets the metadata of this KibanaClusterInfo.

        :return: The metadata of this KibanaClusterInfo.
        :rtype: ClusterMetadataInfo
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this KibanaClusterInfo.

        :param metadata: The metadata of this KibanaClusterInfo.
        :type: ClusterMetadataInfo
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def topology(self):
        """
        Gets the topology of this KibanaClusterInfo.

        :return: The topology of this KibanaClusterInfo.
        :rtype: ClusterTopologyInfo
        """
        return self._topology

    @topology.setter
    def topology(self, topology):
        """
        Sets the topology of this KibanaClusterInfo.

        :param topology: The topology of this KibanaClusterInfo.
        :type: ClusterTopologyInfo
        """
        if topology is None:
            raise ValueError("Invalid value for `topology`, must not be `None`")

        self._topology = topology

    @property
    def external_links(self):
        """
        Gets the external_links of this KibanaClusterInfo.
        External resources related to the cluster

        :return: The external_links of this KibanaClusterInfo.
        :rtype: list[ExternalHyperlink]
        """
        return self._external_links

    @external_links.setter
    def external_links(self, external_links):
        """
        Sets the external_links of this KibanaClusterInfo.
        External resources related to the cluster

        :param external_links: The external_links of this KibanaClusterInfo.
        :type: list[ExternalHyperlink]
        """
        if external_links is None:
            raise ValueError("Invalid value for `external_links`, must not be `None`")

        self._external_links = external_links

    @property
    def links(self):
        """
        Gets the links of this KibanaClusterInfo.
        A map of application-specific operations (which map to 'operationId's in the Swagger API) to metadata about that operation

        :return: The links of this KibanaClusterInfo.
        :rtype: dict(str, Hyperlink)
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this KibanaClusterInfo.
        A map of application-specific operations (which map to 'operationId's in the Swagger API) to metadata about that operation

        :param links: The links of this KibanaClusterInfo.
        :type: dict(str, Hyperlink)
        """

        self._links = links

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, KibanaClusterInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
