# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ElasticsearchPlanControlConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timeout': 'int',
        'calm_wait_time': 'int',
        'move_instances': 'list[InstanceMoveRequest]',
        'move_allocators': 'list[AllocatorMoveRequest]',
        'reallocate_instances': 'bool',
        'preferred_allocators': 'list[str]',
        'skip_snapshot': 'bool',
        'max_snapshot_attempts': 'int',
        'extended_maintenance': 'bool',
        'cluster_reboot': 'str',
        'override_failsafe': 'bool',
        'skip_data_migration': 'bool',
        'skip_upgrade_checker': 'bool',
        'skip_post_upgrade_steps': 'bool'
    }

    attribute_map = {
        'timeout': 'timeout',
        'calm_wait_time': 'calm_wait_time',
        'move_instances': 'move_instances',
        'move_allocators': 'move_allocators',
        'reallocate_instances': 'reallocate_instances',
        'preferred_allocators': 'preferred_allocators',
        'skip_snapshot': 'skip_snapshot',
        'max_snapshot_attempts': 'max_snapshot_attempts',
        'extended_maintenance': 'extended_maintenance',
        'cluster_reboot': 'cluster_reboot',
        'override_failsafe': 'override_failsafe',
        'skip_data_migration': 'skip_data_migration',
        'skip_upgrade_checker': 'skip_upgrade_checker',
        'skip_post_upgrade_steps': 'skip_post_upgrade_steps'
    }

    def __init__(self, timeout=None, calm_wait_time=None, move_instances=None, move_allocators=None, reallocate_instances=None, preferred_allocators=None, skip_snapshot=None, max_snapshot_attempts=None, extended_maintenance=None, cluster_reboot=None, override_failsafe=None, skip_data_migration=None, skip_upgrade_checker=None, skip_post_upgrade_steps=None):
        """
        ElasticsearchPlanControlConfiguration - a model defined in Swagger
        """

        self._timeout = None
        self._calm_wait_time = None
        self._move_instances = None
        self._move_allocators = None
        self._reallocate_instances = None
        self._preferred_allocators = None
        self._skip_snapshot = None
        self._max_snapshot_attempts = None
        self._extended_maintenance = None
        self._cluster_reboot = None
        self._override_failsafe = None
        self._skip_data_migration = None
        self._skip_upgrade_checker = None
        self._skip_post_upgrade_steps = None

        if timeout is not None:
          self.timeout = timeout
        if calm_wait_time is not None:
          self.calm_wait_time = calm_wait_time
        if move_instances is not None:
          self.move_instances = move_instances
        if move_allocators is not None:
          self.move_allocators = move_allocators
        if reallocate_instances is not None:
          self.reallocate_instances = reallocate_instances
        if preferred_allocators is not None:
          self.preferred_allocators = preferred_allocators
        if skip_snapshot is not None:
          self.skip_snapshot = skip_snapshot
        if max_snapshot_attempts is not None:
          self.max_snapshot_attempts = max_snapshot_attempts
        if extended_maintenance is not None:
          self.extended_maintenance = extended_maintenance
        if cluster_reboot is not None:
          self.cluster_reboot = cluster_reboot
        if override_failsafe is not None:
          self.override_failsafe = override_failsafe
        if skip_data_migration is not None:
          self.skip_data_migration = skip_data_migration
        if skip_upgrade_checker is not None:
          self.skip_upgrade_checker = skip_upgrade_checker
        if skip_post_upgrade_steps is not None:
          self.skip_post_upgrade_steps = skip_post_upgrade_steps

    @property
    def timeout(self):
        """
        Gets the timeout of this ElasticsearchPlanControlConfiguration.
        The total timeout in seconds after which the plan is cancelled even if it is not complete. Defaults to 4x the max memory capacity per node (in MB). NOTES: (eg a 3 zone cluster with 2 nodes of 2048 each would have a timeout of 4*2048=8192 seconds)

        :return: The timeout of this ElasticsearchPlanControlConfiguration.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this ElasticsearchPlanControlConfiguration.
        The total timeout in seconds after which the plan is cancelled even if it is not complete. Defaults to 4x the max memory capacity per node (in MB). NOTES: (eg a 3 zone cluster with 2 nodes of 2048 each would have a timeout of 4*2048=8192 seconds)

        :param timeout: The timeout of this ElasticsearchPlanControlConfiguration.
        :type: int
        """

        self._timeout = timeout

    @property
    def calm_wait_time(self):
        """
        Gets the calm_wait_time of this ElasticsearchPlanControlConfiguration.
        This timeout determines how long to give a cluster after it responds to API calls before performing actual operations on it. It defaults to 5s

        :return: The calm_wait_time of this ElasticsearchPlanControlConfiguration.
        :rtype: int
        """
        return self._calm_wait_time

    @calm_wait_time.setter
    def calm_wait_time(self, calm_wait_time):
        """
        Sets the calm_wait_time of this ElasticsearchPlanControlConfiguration.
        This timeout determines how long to give a cluster after it responds to API calls before performing actual operations on it. It defaults to 5s

        :param calm_wait_time: The calm_wait_time of this ElasticsearchPlanControlConfiguration.
        :type: int
        """

        self._calm_wait_time = calm_wait_time

    @property
    def move_instances(self):
        """
        Gets the move_instances of this ElasticsearchPlanControlConfiguration.

        :return: The move_instances of this ElasticsearchPlanControlConfiguration.
        :rtype: list[InstanceMoveRequest]
        """
        return self._move_instances

    @move_instances.setter
    def move_instances(self, move_instances):
        """
        Sets the move_instances of this ElasticsearchPlanControlConfiguration.

        :param move_instances: The move_instances of this ElasticsearchPlanControlConfiguration.
        :type: list[InstanceMoveRequest]
        """

        self._move_instances = move_instances

    @property
    def move_allocators(self):
        """
        Gets the move_allocators of this ElasticsearchPlanControlConfiguration.

        :return: The move_allocators of this ElasticsearchPlanControlConfiguration.
        :rtype: list[AllocatorMoveRequest]
        """
        return self._move_allocators

    @move_allocators.setter
    def move_allocators(self, move_allocators):
        """
        Sets the move_allocators of this ElasticsearchPlanControlConfiguration.

        :param move_allocators: The move_allocators of this ElasticsearchPlanControlConfiguration.
        :type: list[AllocatorMoveRequest]
        """

        self._move_allocators = move_allocators

    @property
    def reallocate_instances(self):
        """
        Gets the reallocate_instances of this ElasticsearchPlanControlConfiguration.
        If true (default: false) does not allow re-using any existing instances currently in the cluster, ie even unchanged instances will be re-created

        :return: The reallocate_instances of this ElasticsearchPlanControlConfiguration.
        :rtype: bool
        """
        return self._reallocate_instances

    @reallocate_instances.setter
    def reallocate_instances(self, reallocate_instances):
        """
        Sets the reallocate_instances of this ElasticsearchPlanControlConfiguration.
        If true (default: false) does not allow re-using any existing instances currently in the cluster, ie even unchanged instances will be re-created

        :param reallocate_instances: The reallocate_instances of this ElasticsearchPlanControlConfiguration.
        :type: bool
        """

        self._reallocate_instances = reallocate_instances

    @property
    def preferred_allocators(self):
        """
        Gets the preferred_allocators of this ElasticsearchPlanControlConfiguration.
        List of allocators on which instances are placed if possible (if not possible/not specified then any available allocator with space is used)

        :return: The preferred_allocators of this ElasticsearchPlanControlConfiguration.
        :rtype: list[str]
        """
        return self._preferred_allocators

    @preferred_allocators.setter
    def preferred_allocators(self, preferred_allocators):
        """
        Sets the preferred_allocators of this ElasticsearchPlanControlConfiguration.
        List of allocators on which instances are placed if possible (if not possible/not specified then any available allocator with space is used)

        :param preferred_allocators: The preferred_allocators of this ElasticsearchPlanControlConfiguration.
        :type: list[str]
        """

        self._preferred_allocators = preferred_allocators

    @property
    def skip_snapshot(self):
        """
        Gets the skip_snapshot of this ElasticsearchPlanControlConfiguration.
        If true (default: false), does not take (or require) a successful snapshot to be taken before performing any potentially destructive changes to this cluster

        :return: The skip_snapshot of this ElasticsearchPlanControlConfiguration.
        :rtype: bool
        """
        return self._skip_snapshot

    @skip_snapshot.setter
    def skip_snapshot(self, skip_snapshot):
        """
        Sets the skip_snapshot of this ElasticsearchPlanControlConfiguration.
        If true (default: false), does not take (or require) a successful snapshot to be taken before performing any potentially destructive changes to this cluster

        :param skip_snapshot: The skip_snapshot of this ElasticsearchPlanControlConfiguration.
        :type: bool
        """

        self._skip_snapshot = skip_snapshot

    @property
    def max_snapshot_attempts(self):
        """
        Gets the max_snapshot_attempts of this ElasticsearchPlanControlConfiguration.
        If taking a snapshot (ie unless 'skip_snapshots': true) then will retry on failure at most this number of times (default: 5)

        :return: The max_snapshot_attempts of this ElasticsearchPlanControlConfiguration.
        :rtype: int
        """
        return self._max_snapshot_attempts

    @max_snapshot_attempts.setter
    def max_snapshot_attempts(self, max_snapshot_attempts):
        """
        Sets the max_snapshot_attempts of this ElasticsearchPlanControlConfiguration.
        If taking a snapshot (ie unless 'skip_snapshots': true) then will retry on failure at most this number of times (default: 5)

        :param max_snapshot_attempts: The max_snapshot_attempts of this ElasticsearchPlanControlConfiguration.
        :type: int
        """

        self._max_snapshot_attempts = max_snapshot_attempts

    @property
    def extended_maintenance(self):
        """
        Gets the extended_maintenance of this ElasticsearchPlanControlConfiguration.
        If true (default false), does not clear the maintenance flag (which prevents its API from being accessed except by the constructor) on new instances added until after a snapshot has been restored, otherwise, the maintenance flag is cleared once the new instances successfully join the new cluster

        :return: The extended_maintenance of this ElasticsearchPlanControlConfiguration.
        :rtype: bool
        """
        return self._extended_maintenance

    @extended_maintenance.setter
    def extended_maintenance(self, extended_maintenance):
        """
        Sets the extended_maintenance of this ElasticsearchPlanControlConfiguration.
        If true (default false), does not clear the maintenance flag (which prevents its API from being accessed except by the constructor) on new instances added until after a snapshot has been restored, otherwise, the maintenance flag is cleared once the new instances successfully join the new cluster

        :param extended_maintenance: The extended_maintenance of this ElasticsearchPlanControlConfiguration.
        :type: bool
        """

        self._extended_maintenance = extended_maintenance

    @property
    def cluster_reboot(self):
        """
        Gets the cluster_reboot of this ElasticsearchPlanControlConfiguration.
        Set to 'forced' to force a reboot as part of the upgrade plan. NOTES: (ie taking an existing plan and leaving it alone except for setting 'transient.plan_configuration.cluster_reboot': 'forced' will reboot the cluster)

        :return: The cluster_reboot of this ElasticsearchPlanControlConfiguration.
        :rtype: str
        """
        return self._cluster_reboot

    @cluster_reboot.setter
    def cluster_reboot(self, cluster_reboot):
        """
        Sets the cluster_reboot of this ElasticsearchPlanControlConfiguration.
        Set to 'forced' to force a reboot as part of the upgrade plan. NOTES: (ie taking an existing plan and leaving it alone except for setting 'transient.plan_configuration.cluster_reboot': 'forced' will reboot the cluster)

        :param cluster_reboot: The cluster_reboot of this ElasticsearchPlanControlConfiguration.
        :type: str
        """
        allowed_values = ["forced"]
        if cluster_reboot not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_reboot` ({0}), must be one of {1}"
                .format(cluster_reboot, allowed_values)
            )

        self._cluster_reboot = cluster_reboot

    @property
    def override_failsafe(self):
        """
        Gets the override_failsafe of this ElasticsearchPlanControlConfiguration.
        If false (the default) then the plan will fail out if it believes the requested sequence of operations can result in data loss - this flag will override some of these restraints

        :return: The override_failsafe of this ElasticsearchPlanControlConfiguration.
        :rtype: bool
        """
        return self._override_failsafe

    @override_failsafe.setter
    def override_failsafe(self, override_failsafe):
        """
        Sets the override_failsafe of this ElasticsearchPlanControlConfiguration.
        If false (the default) then the plan will fail out if it believes the requested sequence of operations can result in data loss - this flag will override some of these restraints

        :param override_failsafe: The override_failsafe of this ElasticsearchPlanControlConfiguration.
        :type: bool
        """

        self._override_failsafe = override_failsafe

    @property
    def skip_data_migration(self):
        """
        Gets the skip_data_migration of this ElasticsearchPlanControlConfiguration.
        If true (default: false) then the plan will not wait for data to be migrated from old instances to new instances before continuing the plan (potentially deleting the old instances and losing data)

        :return: The skip_data_migration of this ElasticsearchPlanControlConfiguration.
        :rtype: bool
        """
        return self._skip_data_migration

    @skip_data_migration.setter
    def skip_data_migration(self, skip_data_migration):
        """
        Sets the skip_data_migration of this ElasticsearchPlanControlConfiguration.
        If true (default: false) then the plan will not wait for data to be migrated from old instances to new instances before continuing the plan (potentially deleting the old instances and losing data)

        :param skip_data_migration: The skip_data_migration of this ElasticsearchPlanControlConfiguration.
        :type: bool
        """

        self._skip_data_migration = skip_data_migration

    @property
    def skip_upgrade_checker(self):
        """
        Gets the skip_upgrade_checker of this ElasticsearchPlanControlConfiguration.
        If false, the cluster is checked for issues that should be resolved before migration (eg contains old Lucene segments), if true this is bypassed

        :return: The skip_upgrade_checker of this ElasticsearchPlanControlConfiguration.
        :rtype: bool
        """
        return self._skip_upgrade_checker

    @skip_upgrade_checker.setter
    def skip_upgrade_checker(self, skip_upgrade_checker):
        """
        Sets the skip_upgrade_checker of this ElasticsearchPlanControlConfiguration.
        If false, the cluster is checked for issues that should be resolved before migration (eg contains old Lucene segments), if true this is bypassed

        :param skip_upgrade_checker: The skip_upgrade_checker of this ElasticsearchPlanControlConfiguration.
        :type: bool
        """

        self._skip_upgrade_checker = skip_upgrade_checker

    @property
    def skip_post_upgrade_steps(self):
        """
        Gets the skip_post_upgrade_steps of this ElasticsearchPlanControlConfiguration.
        If false (the default), the cluster will run (currently) 2.x->5.x operations for any plan change ending with a 5.x cluster (eg apply a cluster license, ensure Monitoring is configured)

        :return: The skip_post_upgrade_steps of this ElasticsearchPlanControlConfiguration.
        :rtype: bool
        """
        return self._skip_post_upgrade_steps

    @skip_post_upgrade_steps.setter
    def skip_post_upgrade_steps(self, skip_post_upgrade_steps):
        """
        Sets the skip_post_upgrade_steps of this ElasticsearchPlanControlConfiguration.
        If false (the default), the cluster will run (currently) 2.x->5.x operations for any plan change ending with a 5.x cluster (eg apply a cluster license, ensure Monitoring is configured)

        :param skip_post_upgrade_steps: The skip_post_upgrade_steps of this ElasticsearchPlanControlConfiguration.
        :type: bool
        """

        self._skip_post_upgrade_steps = skip_post_upgrade_steps

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ElasticsearchPlanControlConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
