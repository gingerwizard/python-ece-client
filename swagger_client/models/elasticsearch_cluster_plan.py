# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ElasticsearchClusterPlan(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'zone_count': 'int',
        'tiebreaker_override': 'bool',
        'tiebreaker_topology': 'TiebreakerTopologyElement',
        'cluster_topology': 'list[ElasticsearchClusterTopologyElement]',
        'elasticsearch': 'ElasticsearchConfiguration',
        'transient': 'TransientElasticsearchPlanConfiguration'
    }

    attribute_map = {
        'zone_count': 'zone_count',
        'tiebreaker_override': 'tiebreaker_override',
        'tiebreaker_topology': 'tiebreaker_topology',
        'cluster_topology': 'cluster_topology',
        'elasticsearch': 'elasticsearch',
        'transient': 'transient'
    }

    def __init__(self, zone_count=None, tiebreaker_override=None, tiebreaker_topology=None, cluster_topology=None, elasticsearch=None, transient=None):
        """
        ElasticsearchClusterPlan - a model defined in Swagger
        """

        self._zone_count = None
        self._tiebreaker_override = None
        self._tiebreaker_topology = None
        self._cluster_topology = None
        self._elasticsearch = None
        self._transient = None

        if zone_count is not None:
          self.zone_count = zone_count
        if tiebreaker_override is not None:
          self.tiebreaker_override = tiebreaker_override
        if tiebreaker_topology is not None:
          self.tiebreaker_topology = tiebreaker_topology
        self.cluster_topology = cluster_topology
        self.elasticsearch = elasticsearch
        if transient is not None:
          self.transient = transient

    @property
    def zone_count(self):
        """
        Gets the zone_count of this ElasticsearchClusterPlan.
        The default number of zones in which data nodes will be placed, if not specified in the per topology settings

        :return: The zone_count of this ElasticsearchClusterPlan.
        :rtype: int
        """
        return self._zone_count

    @zone_count.setter
    def zone_count(self, zone_count):
        """
        Sets the zone_count of this ElasticsearchClusterPlan.
        The default number of zones in which data nodes will be placed, if not specified in the per topology settings

        :param zone_count: The zone_count of this ElasticsearchClusterPlan.
        :type: int
        """

        self._zone_count = zone_count

    @property
    def tiebreaker_override(self):
        """
        Gets the tiebreaker_override of this ElasticsearchClusterPlan.
        Whether to add a tiebreaker node in an unused zone (defaults to auto-decide based on topology). If master nodes are specified then this cannot be left blank, you must explictly decide true or false.

        :return: The tiebreaker_override of this ElasticsearchClusterPlan.
        :rtype: bool
        """
        return self._tiebreaker_override

    @tiebreaker_override.setter
    def tiebreaker_override(self, tiebreaker_override):
        """
        Sets the tiebreaker_override of this ElasticsearchClusterPlan.
        Whether to add a tiebreaker node in an unused zone (defaults to auto-decide based on topology). If master nodes are specified then this cannot be left blank, you must explictly decide true or false.

        :param tiebreaker_override: The tiebreaker_override of this ElasticsearchClusterPlan.
        :type: bool
        """

        self._tiebreaker_override = tiebreaker_override

    @property
    def tiebreaker_topology(self):
        """
        Gets the tiebreaker_topology of this ElasticsearchClusterPlan.

        :return: The tiebreaker_topology of this ElasticsearchClusterPlan.
        :rtype: TiebreakerTopologyElement
        """
        return self._tiebreaker_topology

    @tiebreaker_topology.setter
    def tiebreaker_topology(self, tiebreaker_topology):
        """
        Sets the tiebreaker_topology of this ElasticsearchClusterPlan.

        :param tiebreaker_topology: The tiebreaker_topology of this ElasticsearchClusterPlan.
        :type: TiebreakerTopologyElement
        """

        self._tiebreaker_topology = tiebreaker_topology

    @property
    def cluster_topology(self):
        """
        Gets the cluster_topology of this ElasticsearchClusterPlan.

        :return: The cluster_topology of this ElasticsearchClusterPlan.
        :rtype: list[ElasticsearchClusterTopologyElement]
        """
        return self._cluster_topology

    @cluster_topology.setter
    def cluster_topology(self, cluster_topology):
        """
        Sets the cluster_topology of this ElasticsearchClusterPlan.

        :param cluster_topology: The cluster_topology of this ElasticsearchClusterPlan.
        :type: list[ElasticsearchClusterTopologyElement]
        """
        if cluster_topology is None:
            raise ValueError("Invalid value for `cluster_topology`, must not be `None`")

        self._cluster_topology = cluster_topology

    @property
    def elasticsearch(self):
        """
        Gets the elasticsearch of this ElasticsearchClusterPlan.

        :return: The elasticsearch of this ElasticsearchClusterPlan.
        :rtype: ElasticsearchConfiguration
        """
        return self._elasticsearch

    @elasticsearch.setter
    def elasticsearch(self, elasticsearch):
        """
        Sets the elasticsearch of this ElasticsearchClusterPlan.

        :param elasticsearch: The elasticsearch of this ElasticsearchClusterPlan.
        :type: ElasticsearchConfiguration
        """
        if elasticsearch is None:
            raise ValueError("Invalid value for `elasticsearch`, must not be `None`")

        self._elasticsearch = elasticsearch

    @property
    def transient(self):
        """
        Gets the transient of this ElasticsearchClusterPlan.

        :return: The transient of this ElasticsearchClusterPlan.
        :rtype: TransientElasticsearchPlanConfiguration
        """
        return self._transient

    @transient.setter
    def transient(self, transient):
        """
        Sets the transient of this ElasticsearchClusterPlan.

        :param transient: The transient of this ElasticsearchClusterPlan.
        :type: TransientElasticsearchPlanConfiguration
        """

        self._transient = transient

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ElasticsearchClusterPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
