# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ElasticsearchScriptTypeSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'sandbox_mode': 'bool'
    }

    attribute_map = {
        'enabled': 'enabled',
        'sandbox_mode': 'sandbox_mode'
    }

    def __init__(self, enabled=None, sandbox_mode=None):
        """
        ElasticsearchScriptTypeSettings - a model defined in Swagger
        """

        self._enabled = None
        self._sandbox_mode = None

        if enabled is not None:
          self.enabled = enabled
        if sandbox_mode is not None:
          self.sandbox_mode = sandbox_mode

    @property
    def enabled(self):
        """
        Gets the enabled of this ElasticsearchScriptTypeSettings.
        If enabled (default: true) then scripts are enabled, either for sandboxing languages (by default), or for all installed languages if 'sandbox_mode' is disabled (or for 6.x). NOTES: (Corresponds to the parameter 'script.file|stored/indexed|inline')

        :return: The enabled of this ElasticsearchScriptTypeSettings.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this ElasticsearchScriptTypeSettings.
        If enabled (default: true) then scripts are enabled, either for sandboxing languages (by default), or for all installed languages if 'sandbox_mode' is disabled (or for 6.x). NOTES: (Corresponds to the parameter 'script.file|stored/indexed|inline')

        :param enabled: The enabled of this ElasticsearchScriptTypeSettings.
        :type: bool
        """

        self._enabled = enabled

    @property
    def sandbox_mode(self):
        """
        Gets the sandbox_mode of this ElasticsearchScriptTypeSettings.
        If enabled (default: true) and this script type is enabled, then only the sandbox languages are allowed. By default the sandbox languages are painless, expressions and mustache, but this can be restricted via the 'painless_enabled', 'mustache_enabled' 'expression_enabled' settings.NOTES: Not supported in 6.x. (Corresponds to the parameters 'script.engine.[painless|mustache|expressions].[file|stored|inline]')

        :return: The sandbox_mode of this ElasticsearchScriptTypeSettings.
        :rtype: bool
        """
        return self._sandbox_mode

    @sandbox_mode.setter
    def sandbox_mode(self, sandbox_mode):
        """
        Sets the sandbox_mode of this ElasticsearchScriptTypeSettings.
        If enabled (default: true) and this script type is enabled, then only the sandbox languages are allowed. By default the sandbox languages are painless, expressions and mustache, but this can be restricted via the 'painless_enabled', 'mustache_enabled' 'expression_enabled' settings.NOTES: Not supported in 6.x. (Corresponds to the parameters 'script.engine.[painless|mustache|expressions].[file|stored|inline]')

        :param sandbox_mode: The sandbox_mode of this ElasticsearchScriptTypeSettings.
        :type: bool
        """

        self._sandbox_mode = sandbox_mode

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ElasticsearchScriptTypeSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
