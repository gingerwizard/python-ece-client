# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MatchQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query': 'str',
        'operator': 'str',
        'minimum_should_match': 'int',
        'analyzer': 'str'
    }

    attribute_map = {
        'query': 'query',
        'operator': 'operator',
        'minimum_should_match': 'minimum_should_match',
        'analyzer': 'analyzer'
    }

    def __init__(self, query=None, operator=None, minimum_should_match=None, analyzer=None):
        """
        MatchQuery - a model defined in Swagger
        """

        self._query = None
        self._operator = None
        self._minimum_should_match = None
        self._analyzer = None

        self.query = query
        if operator is not None:
          self.operator = operator
        if minimum_should_match is not None:
          self.minimum_should_match = minimum_should_match
        if analyzer is not None:
          self.analyzer = analyzer

    @property
    def query(self):
        """
        Gets the query of this MatchQuery.
        The text/numeric/date to query for.

        :return: The query of this MatchQuery.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this MatchQuery.
        The text/numeric/date to query for.

        :param query: The query of this MatchQuery.
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def operator(self):
        """
        Gets the operator of this MatchQuery.
        The operator flag can be set to or or and to control the boolean clauses (defaults to or).

        :return: The operator of this MatchQuery.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """
        Sets the operator of this MatchQuery.
        The operator flag can be set to or or and to control the boolean clauses (defaults to or).

        :param operator: The operator of this MatchQuery.
        :type: str
        """

        self._operator = operator

    @property
    def minimum_should_match(self):
        """
        Gets the minimum_should_match of this MatchQuery.
        The minimum number of optional should clauses to match.

        :return: The minimum_should_match of this MatchQuery.
        :rtype: int
        """
        return self._minimum_should_match

    @minimum_should_match.setter
    def minimum_should_match(self, minimum_should_match):
        """
        Sets the minimum_should_match of this MatchQuery.
        The minimum number of optional should clauses to match.

        :param minimum_should_match: The minimum_should_match of this MatchQuery.
        :type: int
        """

        self._minimum_should_match = minimum_should_match

    @property
    def analyzer(self):
        """
        Gets the analyzer of this MatchQuery.
        The analyzer that will be used to perform the analysis process on the text. Defaults to the analyzer that was used to index the field.

        :return: The analyzer of this MatchQuery.
        :rtype: str
        """
        return self._analyzer

    @analyzer.setter
    def analyzer(self, analyzer):
        """
        Sets the analyzer of this MatchQuery.
        The analyzer that will be used to perform the analysis process on the text. Defaults to the analyzer that was used to index the field.

        :param analyzer: The analyzer of this MatchQuery.
        :type: str
        """

        self._analyzer = analyzer

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MatchQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
