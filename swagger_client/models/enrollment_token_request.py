# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnrollmentTokenRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'roles': 'list[str]',
        'persistent': 'bool',
        'validity_in_seconds': 'int'
    }

    attribute_map = {
        'roles': 'roles',
        'persistent': 'persistent',
        'validity_in_seconds': 'validity_in_seconds'
    }

    def __init__(self, roles=None, persistent=None, validity_in_seconds=None):
        """
        EnrollmentTokenRequest - a model defined in Swagger
        """

        self._roles = None
        self._persistent = None
        self._validity_in_seconds = None

        if roles is not None:
          self.roles = roles
        self.persistent = persistent
        if validity_in_seconds is not None:
          self.validity_in_seconds = validity_in_seconds

    @property
    def roles(self):
        """
        Gets the roles of this EnrollmentTokenRequest.
        The additional services for which this enrollment token applies (empty if not specified, ie system services only)

        :return: The roles of this EnrollmentTokenRequest.
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this EnrollmentTokenRequest.
        The additional services for which this enrollment token applies (empty if not specified, ie system services only)

        :param roles: The roles of this EnrollmentTokenRequest.
        :type: list[str]
        """

        self._roles = roles

    @property
    def persistent(self):
        """
        Gets the persistent of this EnrollmentTokenRequest.
        Whether this token can subsequently to its grant be revoked from the UI

        :return: The persistent of this EnrollmentTokenRequest.
        :rtype: bool
        """
        return self._persistent

    @persistent.setter
    def persistent(self, persistent):
        """
        Sets the persistent of this EnrollmentTokenRequest.
        Whether this token can subsequently to its grant be revoked from the UI

        :param persistent: The persistent of this EnrollmentTokenRequest.
        :type: bool
        """
        if persistent is None:
            raise ValueError("Invalid value for `persistent`, must not be `None`")

        self._persistent = persistent

    @property
    def validity_in_seconds(self):
        """
        Gets the validity_in_seconds of this EnrollmentTokenRequest.
        The time in seconds for which this token is valid (defaults to 1 hour). Currently this can only be set for ephemeral (persistent: false) tokens.

        :return: The validity_in_seconds of this EnrollmentTokenRequest.
        :rtype: int
        """
        return self._validity_in_seconds

    @validity_in_seconds.setter
    def validity_in_seconds(self, validity_in_seconds):
        """
        Sets the validity_in_seconds of this EnrollmentTokenRequest.
        The time in seconds for which this token is valid (defaults to 1 hour). Currently this can only be set for ephemeral (persistent: false) tokens.

        :param validity_in_seconds: The validity_in_seconds of this EnrollmentTokenRequest.
        :type: int
        """

        self._validity_in_seconds = validity_in_seconds

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnrollmentTokenRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
