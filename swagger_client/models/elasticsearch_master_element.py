# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ElasticsearchMasterElement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'master_node_id': 'str',
        'master_instance_name': 'str',
        'instances': 'list[str]'
    }

    attribute_map = {
        'master_node_id': 'master_node_id',
        'master_instance_name': 'master_instance_name',
        'instances': 'instances'
    }

    def __init__(self, master_node_id=None, master_instance_name=None, instances=None):
        """
        ElasticsearchMasterElement - a model defined in Swagger
        """

        self._master_node_id = None
        self._master_instance_name = None
        self._instances = None

        self.master_node_id = master_node_id
        if master_instance_name is not None:
          self.master_instance_name = master_instance_name
        self.instances = instances

    @property
    def master_node_id(self):
        """
        Gets the master_node_id of this ElasticsearchMasterElement.
        The Elasticsearch node id of a master node

        :return: The master_node_id of this ElasticsearchMasterElement.
        :rtype: str
        """
        return self._master_node_id

    @master_node_id.setter
    def master_node_id(self, master_node_id):
        """
        Sets the master_node_id of this ElasticsearchMasterElement.
        The Elasticsearch node id of a master node

        :param master_node_id: The master_node_id of this ElasticsearchMasterElement.
        :type: str
        """
        if master_node_id is None:
            raise ValueError("Invalid value for `master_node_id`, must not be `None`")

        self._master_node_id = master_node_id

    @property
    def master_instance_name(self):
        """
        Gets the master_instance_name of this ElasticsearchMasterElement.
        The corresponding instance name of the container hosting the Elasticsearch master node, if available

        :return: The master_instance_name of this ElasticsearchMasterElement.
        :rtype: str
        """
        return self._master_instance_name

    @master_instance_name.setter
    def master_instance_name(self, master_instance_name):
        """
        Sets the master_instance_name of this ElasticsearchMasterElement.
        The corresponding instance name of the container hosting the Elasticsearch master node, if available

        :param master_instance_name: The master_instance_name of this ElasticsearchMasterElement.
        :type: str
        """

        self._master_instance_name = master_instance_name

    @property
    def instances(self):
        """
        Gets the instances of this ElasticsearchMasterElement.
        The names of the instance/container hosting the node belong to the cluster with the given master

        :return: The instances of this ElasticsearchMasterElement.
        :rtype: list[str]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """
        Sets the instances of this ElasticsearchMasterElement.
        The names of the instance/container hosting the node belong to the cluster with the given master

        :param instances: The instances of this ElasticsearchMasterElement.
        :type: list[str]
        """
        if instances is None:
            raise ValueError("Invalid value for `instances`, must not be `None`")

        self._instances = instances

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ElasticsearchMasterElement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
