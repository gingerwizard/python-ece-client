# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class QueryContainer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'match': 'dict(str, MatchQuery)',
        'term': 'dict(str, TermQuery)',
        'bool': 'BoolQuery',
        'query_string': 'QueryStringQuery',
        'nested': 'NestedQuery'
    }

    attribute_map = {
        'match': 'match',
        'term': 'term',
        'bool': 'bool',
        'query_string': 'query_string',
        'nested': 'nested'
    }

    def __init__(self, match=None, term=None, bool=None, query_string=None, nested=None):
        """
        QueryContainer - a model defined in Swagger
        """

        self._match = None
        self._term = None
        self._bool = None
        self._query_string = None
        self._nested = None

        if match is not None:
          self.match = match
        if term is not None:
          self.term = term
        if bool is not None:
          self.bool = bool
        if query_string is not None:
          self.query_string = query_string
        if nested is not None:
          self.nested = nested

    @property
    def match(self):
        """
        Gets the match of this QueryContainer.

        :return: The match of this QueryContainer.
        :rtype: dict(str, MatchQuery)
        """
        return self._match

    @match.setter
    def match(self, match):
        """
        Sets the match of this QueryContainer.

        :param match: The match of this QueryContainer.
        :type: dict(str, MatchQuery)
        """

        self._match = match

    @property
    def term(self):
        """
        Gets the term of this QueryContainer.

        :return: The term of this QueryContainer.
        :rtype: dict(str, TermQuery)
        """
        return self._term

    @term.setter
    def term(self, term):
        """
        Sets the term of this QueryContainer.

        :param term: The term of this QueryContainer.
        :type: dict(str, TermQuery)
        """

        self._term = term

    @property
    def bool(self):
        """
        Gets the bool of this QueryContainer.

        :return: The bool of this QueryContainer.
        :rtype: BoolQuery
        """
        return self._bool

    @bool.setter
    def bool(self, bool):
        """
        Sets the bool of this QueryContainer.

        :param bool: The bool of this QueryContainer.
        :type: BoolQuery
        """

        self._bool = bool

    @property
    def query_string(self):
        """
        Gets the query_string of this QueryContainer.

        :return: The query_string of this QueryContainer.
        :rtype: QueryStringQuery
        """
        return self._query_string

    @query_string.setter
    def query_string(self, query_string):
        """
        Sets the query_string of this QueryContainer.

        :param query_string: The query_string of this QueryContainer.
        :type: QueryStringQuery
        """

        self._query_string = query_string

    @property
    def nested(self):
        """
        Gets the nested of this QueryContainer.

        :return: The nested of this QueryContainer.
        :rtype: NestedQuery
        """
        return self._nested

    @nested.setter
    def nested(self, nested):
        """
        Sets the nested of this QueryContainer.

        :param nested: The nested of this QueryContainer.
        :type: NestedQuery
        """

        self._nested = nested

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, QueryContainer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
