# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ElasticsearchSystemSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scripting': 'ElasticsearchScriptingUserSettings',
        'reindex_whitelist': 'list[str]',
        'use_disk_threshold': 'bool',
        'auto_create_index': 'bool',
        'enable_close_index': 'bool',
        'destructive_requires_name': 'bool',
        'watcher_trigger_engine': 'str',
        'default_shards_per_index': 'int',
        'monitoring_collection_interval': 'int',
        'monitoring_history_duration': 'str'
    }

    attribute_map = {
        'scripting': 'scripting',
        'reindex_whitelist': 'reindex_whitelist',
        'use_disk_threshold': 'use_disk_threshold',
        'auto_create_index': 'auto_create_index',
        'enable_close_index': 'enable_close_index',
        'destructive_requires_name': 'destructive_requires_name',
        'watcher_trigger_engine': 'watcher_trigger_engine',
        'default_shards_per_index': 'default_shards_per_index',
        'monitoring_collection_interval': 'monitoring_collection_interval',
        'monitoring_history_duration': 'monitoring_history_duration'
    }

    def __init__(self, scripting=None, reindex_whitelist=None, use_disk_threshold=None, auto_create_index=None, enable_close_index=None, destructive_requires_name=None, watcher_trigger_engine=None, default_shards_per_index=None, monitoring_collection_interval=None, monitoring_history_duration=None):
        """
        ElasticsearchSystemSettings - a model defined in Swagger
        """

        self._scripting = None
        self._reindex_whitelist = None
        self._use_disk_threshold = None
        self._auto_create_index = None
        self._enable_close_index = None
        self._destructive_requires_name = None
        self._watcher_trigger_engine = None
        self._default_shards_per_index = None
        self._monitoring_collection_interval = None
        self._monitoring_history_duration = None

        if scripting is not None:
          self.scripting = scripting
        if reindex_whitelist is not None:
          self.reindex_whitelist = reindex_whitelist
        if use_disk_threshold is not None:
          self.use_disk_threshold = use_disk_threshold
        if auto_create_index is not None:
          self.auto_create_index = auto_create_index
        if enable_close_index is not None:
          self.enable_close_index = enable_close_index
        if destructive_requires_name is not None:
          self.destructive_requires_name = destructive_requires_name
        if watcher_trigger_engine is not None:
          self.watcher_trigger_engine = watcher_trigger_engine
        if default_shards_per_index is not None:
          self.default_shards_per_index = default_shards_per_index
        if monitoring_collection_interval is not None:
          self.monitoring_collection_interval = monitoring_collection_interval
        if monitoring_history_duration is not None:
          self.monitoring_history_duration = monitoring_history_duration

    @property
    def scripting(self):
        """
        Gets the scripting of this ElasticsearchSystemSettings.

        :return: The scripting of this ElasticsearchSystemSettings.
        :rtype: ElasticsearchScriptingUserSettings
        """
        return self._scripting

    @scripting.setter
    def scripting(self, scripting):
        """
        Sets the scripting of this ElasticsearchSystemSettings.

        :param scripting: The scripting of this ElasticsearchSystemSettings.
        :type: ElasticsearchScriptingUserSettings
        """

        self._scripting = scripting

    @property
    def reindex_whitelist(self):
        """
        Gets the reindex_whitelist of this ElasticsearchSystemSettings.
        Limits remote Elasticsearch clusters that can be used as the source for '_reindex' API commands

        :return: The reindex_whitelist of this ElasticsearchSystemSettings.
        :rtype: list[str]
        """
        return self._reindex_whitelist

    @reindex_whitelist.setter
    def reindex_whitelist(self, reindex_whitelist):
        """
        Sets the reindex_whitelist of this ElasticsearchSystemSettings.
        Limits remote Elasticsearch clusters that can be used as the source for '_reindex' API commands

        :param reindex_whitelist: The reindex_whitelist of this ElasticsearchSystemSettings.
        :type: list[str]
        """

        self._reindex_whitelist = reindex_whitelist

    @property
    def use_disk_threshold(self):
        """
        Gets the use_disk_threshold of this ElasticsearchSystemSettings.
        Whether to factor in the available disk space on a node before deciding whether to allocate new shards to that node or actively relocate shards away from the node (default: true). NOTES: (Corresponds to the parameter 'cluster.routing.allocation.disk.threshold_enabled')

        :return: The use_disk_threshold of this ElasticsearchSystemSettings.
        :rtype: bool
        """
        return self._use_disk_threshold

    @use_disk_threshold.setter
    def use_disk_threshold(self, use_disk_threshold):
        """
        Sets the use_disk_threshold of this ElasticsearchSystemSettings.
        Whether to factor in the available disk space on a node before deciding whether to allocate new shards to that node or actively relocate shards away from the node (default: true). NOTES: (Corresponds to the parameter 'cluster.routing.allocation.disk.threshold_enabled')

        :param use_disk_threshold: The use_disk_threshold of this ElasticsearchSystemSettings.
        :type: bool
        """

        self._use_disk_threshold = use_disk_threshold

    @property
    def auto_create_index(self):
        """
        Gets the auto_create_index of this ElasticsearchSystemSettings.
        If true (the default), then any write operation on an index that does not currently exist will create it. NOTES: (Corresponds to the parameter 'action.auto_create_index')

        :return: The auto_create_index of this ElasticsearchSystemSettings.
        :rtype: bool
        """
        return self._auto_create_index

    @auto_create_index.setter
    def auto_create_index(self, auto_create_index):
        """
        Sets the auto_create_index of this ElasticsearchSystemSettings.
        If true (the default), then any write operation on an index that does not currently exist will create it. NOTES: (Corresponds to the parameter 'action.auto_create_index')

        :param auto_create_index: The auto_create_index of this ElasticsearchSystemSettings.
        :type: bool
        """

        self._auto_create_index = auto_create_index

    @property
    def enable_close_index(self):
        """
        Gets the enable_close_index of this ElasticsearchSystemSettings.
        If false (the default), then the API commands to close indices are disabled. This is important because Elasticsearch does not snapshot or migrate close indices, therefore standard Elastic Cloud configuration operations will cause irretrievable loss of indices' data. NOTES: (Corresponds to the parameter 'cluster.indices.close.enable')

        :return: The enable_close_index of this ElasticsearchSystemSettings.
        :rtype: bool
        """
        return self._enable_close_index

    @enable_close_index.setter
    def enable_close_index(self, enable_close_index):
        """
        Sets the enable_close_index of this ElasticsearchSystemSettings.
        If false (the default), then the API commands to close indices are disabled. This is important because Elasticsearch does not snapshot or migrate close indices, therefore standard Elastic Cloud configuration operations will cause irretrievable loss of indices' data. NOTES: (Corresponds to the parameter 'cluster.indices.close.enable')

        :param enable_close_index: The enable_close_index of this ElasticsearchSystemSettings.
        :type: bool
        """

        self._enable_close_index = enable_close_index

    @property
    def destructive_requires_name(self):
        """
        Gets the destructive_requires_name of this ElasticsearchSystemSettings.
        If true (default is false) then the index deletion API will not support wildcards or '_all'. NOTES: (Corresponds to the parameter 'action.destructive_requires_name')

        :return: The destructive_requires_name of this ElasticsearchSystemSettings.
        :rtype: bool
        """
        return self._destructive_requires_name

    @destructive_requires_name.setter
    def destructive_requires_name(self, destructive_requires_name):
        """
        Sets the destructive_requires_name of this ElasticsearchSystemSettings.
        If true (default is false) then the index deletion API will not support wildcards or '_all'. NOTES: (Corresponds to the parameter 'action.destructive_requires_name')

        :param destructive_requires_name: The destructive_requires_name of this ElasticsearchSystemSettings.
        :type: bool
        """

        self._destructive_requires_name = destructive_requires_name

    @property
    def watcher_trigger_engine(self):
        """
        Gets the watcher_trigger_engine of this ElasticsearchSystemSettings.
        The trigger engine for Watcher, defaults to 'scheduler' - see the xpack documentation for more information. NOTES: (Corresponds to the parameter '(xpack.)watcher.trigger.schedule.engine', depending on version. Ignored from 6.x onwards.)

        :return: The watcher_trigger_engine of this ElasticsearchSystemSettings.
        :rtype: str
        """
        return self._watcher_trigger_engine

    @watcher_trigger_engine.setter
    def watcher_trigger_engine(self, watcher_trigger_engine):
        """
        Sets the watcher_trigger_engine of this ElasticsearchSystemSettings.
        The trigger engine for Watcher, defaults to 'scheduler' - see the xpack documentation for more information. NOTES: (Corresponds to the parameter '(xpack.)watcher.trigger.schedule.engine', depending on version. Ignored from 6.x onwards.)

        :param watcher_trigger_engine: The watcher_trigger_engine of this ElasticsearchSystemSettings.
        :type: str
        """

        self._watcher_trigger_engine = watcher_trigger_engine

    @property
    def default_shards_per_index(self):
        """
        Gets the default_shards_per_index of this ElasticsearchSystemSettings.
        (2.x only - to get the same result in 5.x template mappings must be used) Sets the default number of shards per index, defaulting to 1 if not specified. (Corresponds to the parameter 'index.number_of_shards' in 2.x, not supported in 5.x)

        :return: The default_shards_per_index of this ElasticsearchSystemSettings.
        :rtype: int
        """
        return self._default_shards_per_index

    @default_shards_per_index.setter
    def default_shards_per_index(self, default_shards_per_index):
        """
        Sets the default_shards_per_index of this ElasticsearchSystemSettings.
        (2.x only - to get the same result in 5.x template mappings must be used) Sets the default number of shards per index, defaulting to 1 if not specified. (Corresponds to the parameter 'index.number_of_shards' in 2.x, not supported in 5.x)

        :param default_shards_per_index: The default_shards_per_index of this ElasticsearchSystemSettings.
        :type: int
        """

        self._default_shards_per_index = default_shards_per_index

    @property
    def monitoring_collection_interval(self):
        """
        Gets the monitoring_collection_interval of this ElasticsearchSystemSettings.
        The default interval at which monitoring information from the cluster if collected, if monitoring is enabled. NOTES: (Corresponds to the parameter 'marvel.agent.interval' in 2.x and 'xpack.monitoring.collection.interval' in 5.x)

        :return: The monitoring_collection_interval of this ElasticsearchSystemSettings.
        :rtype: int
        """
        return self._monitoring_collection_interval

    @monitoring_collection_interval.setter
    def monitoring_collection_interval(self, monitoring_collection_interval):
        """
        Sets the monitoring_collection_interval of this ElasticsearchSystemSettings.
        The default interval at which monitoring information from the cluster if collected, if monitoring is enabled. NOTES: (Corresponds to the parameter 'marvel.agent.interval' in 2.x and 'xpack.monitoring.collection.interval' in 5.x)

        :param monitoring_collection_interval: The monitoring_collection_interval of this ElasticsearchSystemSettings.
        :type: int
        """

        self._monitoring_collection_interval = monitoring_collection_interval

    @property
    def monitoring_history_duration(self):
        """
        Gets the monitoring_history_duration of this ElasticsearchSystemSettings.
        The duration for which monitoring history is stored (format '(NUMBER)d' eg '3d' for 3 days). NOTES: ('Corresponds to the parameter xpack.monitoring.history.duration' in 5.x, defaults to '7d')

        :return: The monitoring_history_duration of this ElasticsearchSystemSettings.
        :rtype: str
        """
        return self._monitoring_history_duration

    @monitoring_history_duration.setter
    def monitoring_history_duration(self, monitoring_history_duration):
        """
        Sets the monitoring_history_duration of this ElasticsearchSystemSettings.
        The duration for which monitoring history is stored (format '(NUMBER)d' eg '3d' for 3 days). NOTES: ('Corresponds to the parameter xpack.monitoring.history.duration' in 5.x, defaults to '7d')

        :param monitoring_history_duration: The monitoring_history_duration of this ElasticsearchSystemSettings.
        :type: str
        """

        self._monitoring_history_duration = monitoring_history_duration

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ElasticsearchSystemSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
