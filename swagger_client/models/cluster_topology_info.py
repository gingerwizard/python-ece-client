# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClusterTopologyInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'healthy': 'bool',
        'instances': 'list[ClusterInstanceInfo]'
    }

    attribute_map = {
        'healthy': 'healthy',
        'instances': 'instances'
    }

    def __init__(self, healthy=None, instances=None):
        """
        ClusterTopologyInfo - a model defined in Swagger
        """

        self._healthy = None
        self._instances = None

        self.healthy = healthy
        self.instances = instances

    @property
    def healthy(self):
        """
        Gets the healthy of this ClusterTopologyInfo.
        Whether the cluster topology is healthy (ie all instances are started and the services they run - ie elasticsearch - are available

        :return: The healthy of this ClusterTopologyInfo.
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """
        Sets the healthy of this ClusterTopologyInfo.
        Whether the cluster topology is healthy (ie all instances are started and the services they run - ie elasticsearch - are available

        :param healthy: The healthy of this ClusterTopologyInfo.
        :type: bool
        """
        if healthy is None:
            raise ValueError("Invalid value for `healthy`, must not be `None`")

        self._healthy = healthy

    @property
    def instances(self):
        """
        Gets the instances of this ClusterTopologyInfo.

        :return: The instances of this ClusterTopologyInfo.
        :rtype: list[ClusterInstanceInfo]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """
        Sets the instances of this ClusterTopologyInfo.

        :param instances: The instances of this ClusterTopologyInfo.
        :type: list[ClusterInstanceInfo]
        """
        if instances is None:
            raise ValueError("Invalid value for `instances`, must not be `None`")

        self._instances = instances

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClusterTopologyInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
