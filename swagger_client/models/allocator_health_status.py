# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AllocatorHealthStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connected': 'bool',
        'healthy': 'bool',
        'maintenance_mode': 'bool'
    }

    attribute_map = {
        'connected': 'connected',
        'healthy': 'healthy',
        'maintenance_mode': 'maintenance_mode'
    }

    def __init__(self, connected=None, healthy=None, maintenance_mode=None):
        """
        AllocatorHealthStatus - a model defined in Swagger
        """

        self._connected = None
        self._healthy = None
        self._maintenance_mode = None

        if connected is not None:
          self.connected = connected
        if healthy is not None:
          self.healthy = healthy
        if maintenance_mode is not None:
          self.maintenance_mode = maintenance_mode

    @property
    def connected(self):
        """
        Gets the connected of this AllocatorHealthStatus.
        Whether the allocator is connected

        :return: The connected of this AllocatorHealthStatus.
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """
        Sets the connected of this AllocatorHealthStatus.
        Whether the allocator is connected

        :param connected: The connected of this AllocatorHealthStatus.
        :type: bool
        """

        self._connected = connected

    @property
    def healthy(self):
        """
        Gets the healthy of this AllocatorHealthStatus.
        Whether the allocator is healthy, meaning it is either connected or has no instances

        :return: The healthy of this AllocatorHealthStatus.
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """
        Sets the healthy of this AllocatorHealthStatus.
        Whether the allocator is healthy, meaning it is either connected or has no instances

        :param healthy: The healthy of this AllocatorHealthStatus.
        :type: bool
        """

        self._healthy = healthy

    @property
    def maintenance_mode(self):
        """
        Gets the maintenance_mode of this AllocatorHealthStatus.
        Whether the allocator is in maintenance mode (meaning that new workload won't be assigned to it)

        :return: The maintenance_mode of this AllocatorHealthStatus.
        :rtype: bool
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """
        Sets the maintenance_mode of this AllocatorHealthStatus.
        Whether the allocator is in maintenance mode (meaning that new workload won't be assigned to it)

        :param maintenance_mode: The maintenance_mode of this AllocatorHealthStatus.
        :type: bool
        """

        self._maintenance_mode = maintenance_mode

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AllocatorHealthStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
