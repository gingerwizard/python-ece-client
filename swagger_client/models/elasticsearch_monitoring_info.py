# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ElasticsearchMonitoringInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'healthy': 'bool',
        'last_modified': 'datetime',
        'last_update_status': 'str',
        'source_cluster_ids': 'list[str]',
        'destination_cluster_ids': 'list[str]'
    }

    attribute_map = {
        'healthy': 'healthy',
        'last_modified': 'last_modified',
        'last_update_status': 'last_update_status',
        'source_cluster_ids': 'source_cluster_ids',
        'destination_cluster_ids': 'destination_cluster_ids'
    }

    def __init__(self, healthy=None, last_modified=None, last_update_status=None, source_cluster_ids=None, destination_cluster_ids=None):
        """
        ElasticsearchMonitoringInfo - a model defined in Swagger
        """

        self._healthy = None
        self._last_modified = None
        self._last_update_status = None
        self._source_cluster_ids = None
        self._destination_cluster_ids = None

        self.healthy = healthy
        self.last_modified = last_modified
        self.last_update_status = last_update_status
        self.source_cluster_ids = source_cluster_ids
        self.destination_cluster_ids = destination_cluster_ids

    @property
    def healthy(self):
        """
        Gets the healthy of this ElasticsearchMonitoringInfo.
        Whether the Monitoring configuration has been successfully applied

        :return: The healthy of this ElasticsearchMonitoringInfo.
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """
        Sets the healthy of this ElasticsearchMonitoringInfo.
        Whether the Monitoring configuration has been successfully applied

        :param healthy: The healthy of this ElasticsearchMonitoringInfo.
        :type: bool
        """
        if healthy is None:
            raise ValueError("Invalid value for `healthy`, must not be `None`")

        self._healthy = healthy

    @property
    def last_modified(self):
        """
        Gets the last_modified of this ElasticsearchMonitoringInfo.
        The time the monitoring configuration was last changed

        :return: The last_modified of this ElasticsearchMonitoringInfo.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """
        Sets the last_modified of this ElasticsearchMonitoringInfo.
        The time the monitoring configuration was last changed

        :param last_modified: The last_modified of this ElasticsearchMonitoringInfo.
        :type: datetime
        """
        if last_modified is None:
            raise ValueError("Invalid value for `last_modified`, must not be `None`")

        self._last_modified = last_modified

    @property
    def last_update_status(self):
        """
        Gets the last_update_status of this ElasticsearchMonitoringInfo.
        The status message from the last update (successful or not)

        :return: The last_update_status of this ElasticsearchMonitoringInfo.
        :rtype: str
        """
        return self._last_update_status

    @last_update_status.setter
    def last_update_status(self, last_update_status):
        """
        Sets the last_update_status of this ElasticsearchMonitoringInfo.
        The status message from the last update (successful or not)

        :param last_update_status: The last_update_status of this ElasticsearchMonitoringInfo.
        :type: str
        """
        if last_update_status is None:
            raise ValueError("Invalid value for `last_update_status`, must not be `None`")

        self._last_update_status = last_update_status

    @property
    def source_cluster_ids(self):
        """
        Gets the source_cluster_ids of this ElasticsearchMonitoringInfo.
        The list of clusters Ids from which this cluster is currently receiving monitoring data

        :return: The source_cluster_ids of this ElasticsearchMonitoringInfo.
        :rtype: list[str]
        """
        return self._source_cluster_ids

    @source_cluster_ids.setter
    def source_cluster_ids(self, source_cluster_ids):
        """
        Sets the source_cluster_ids of this ElasticsearchMonitoringInfo.
        The list of clusters Ids from which this cluster is currently receiving monitoring data

        :param source_cluster_ids: The source_cluster_ids of this ElasticsearchMonitoringInfo.
        :type: list[str]
        """
        if source_cluster_ids is None:
            raise ValueError("Invalid value for `source_cluster_ids`, must not be `None`")

        self._source_cluster_ids = source_cluster_ids

    @property
    def destination_cluster_ids(self):
        """
        Gets the destination_cluster_ids of this ElasticsearchMonitoringInfo.
        The list of clusters Ids to which this cluster is currently sending monitoring data

        :return: The destination_cluster_ids of this ElasticsearchMonitoringInfo.
        :rtype: list[str]
        """
        return self._destination_cluster_ids

    @destination_cluster_ids.setter
    def destination_cluster_ids(self, destination_cluster_ids):
        """
        Sets the destination_cluster_ids of this ElasticsearchMonitoringInfo.
        The list of clusters Ids to which this cluster is currently sending monitoring data

        :param destination_cluster_ids: The destination_cluster_ids of this ElasticsearchMonitoringInfo.
        :type: list[str]
        """
        if destination_cluster_ids is None:
            raise ValueError("Invalid value for `destination_cluster_ids`, must not be `None`")

        self._destination_cluster_ids = destination_cluster_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ElasticsearchMonitoringInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
