# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RollingStrategyConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_by': 'str',
        'allow_inline_resize': 'bool',
        'skip_synced_flush': 'bool'
    }

    attribute_map = {
        'group_by': 'group_by',
        'allow_inline_resize': 'allow_inline_resize',
        'skip_synced_flush': 'skip_synced_flush'
    }

    def __init__(self, group_by=None, allow_inline_resize=None, skip_synced_flush=None):
        """
        RollingStrategyConfig - a model defined in Swagger
        """

        self._group_by = None
        self._allow_inline_resize = None
        self._skip_synced_flush = None

        if group_by is not None:
          self.group_by = group_by
        if allow_inline_resize is not None:
          self.allow_inline_resize = allow_inline_resize
        if skip_synced_flush is not None:
          self.skip_synced_flush = skip_synced_flush

    @property
    def group_by(self):
        """
        Gets the group_by of this RollingStrategyConfig.
        Specifies the grouping attribute to use when rolling several instances. Instances that share the same value for the provided attribute key are rolled together as a unit. Examples that make sense to use are '\\_\\_all\\_\\_' (roll all instances as a single unit), 'logical_zone_name' (roll instances by zone), '\\_\\_name\\_\\_' (roll one instance at a time, the default if not specified). Note that '\\_\\_all\\_\\_' is required when performing a major version upgrade

        :return: The group_by of this RollingStrategyConfig.
        :rtype: str
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """
        Sets the group_by of this RollingStrategyConfig.
        Specifies the grouping attribute to use when rolling several instances. Instances that share the same value for the provided attribute key are rolled together as a unit. Examples that make sense to use are '\\_\\_all\\_\\_' (roll all instances as a single unit), 'logical_zone_name' (roll instances by zone), '\\_\\_name\\_\\_' (roll one instance at a time, the default if not specified). Note that '\\_\\_all\\_\\_' is required when performing a major version upgrade

        :param group_by: The group_by of this RollingStrategyConfig.
        :type: str
        """

        self._group_by = group_by

    @property
    def allow_inline_resize(self):
        """
        Gets the allow_inline_resize of this RollingStrategyConfig.
        Whether we allow changing the capacity of instances (default false). This is currently implemented by stopping, re-creating then starting the affected instance on its associated allocator when performing the changes. NOTES: This requires a round-trip through the allocation infrastructure of the active constructor, as it has to reserve the target capacity without over-committing

        :return: The allow_inline_resize of this RollingStrategyConfig.
        :rtype: bool
        """
        return self._allow_inline_resize

    @allow_inline_resize.setter
    def allow_inline_resize(self, allow_inline_resize):
        """
        Sets the allow_inline_resize of this RollingStrategyConfig.
        Whether we allow changing the capacity of instances (default false). This is currently implemented by stopping, re-creating then starting the affected instance on its associated allocator when performing the changes. NOTES: This requires a round-trip through the allocation infrastructure of the active constructor, as it has to reserve the target capacity without over-committing

        :param allow_inline_resize: The allow_inline_resize of this RollingStrategyConfig.
        :type: bool
        """

        self._allow_inline_resize = allow_inline_resize

    @property
    def skip_synced_flush(self):
        """
        Gets the skip_synced_flush of this RollingStrategyConfig.
        Whether to skip attempting to do a synced flush on the filesystem of the container (default: false), which is less safe but may be required if the container is unhealthy

        :return: The skip_synced_flush of this RollingStrategyConfig.
        :rtype: bool
        """
        return self._skip_synced_flush

    @skip_synced_flush.setter
    def skip_synced_flush(self, skip_synced_flush):
        """
        Sets the skip_synced_flush of this RollingStrategyConfig.
        Whether to skip attempting to do a synced flush on the filesystem of the container (default: false), which is less safe but may be required if the container is unhealthy

        :param skip_synced_flush: The skip_synced_flush of this RollingStrategyConfig.
        :type: bool
        """

        self._skip_synced_flush = skip_synced_flush

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RollingStrategyConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
