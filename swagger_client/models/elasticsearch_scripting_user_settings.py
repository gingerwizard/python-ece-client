# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ElasticsearchScriptingUserSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'painless_enabled': 'bool',
        'mustache_enabled': 'bool',
        'expressions_enabled': 'bool',
        'stored': 'ElasticsearchScriptTypeSettings',
        'file': 'ElasticsearchScriptTypeSettings',
        'inline': 'ElasticsearchScriptTypeSettings'
    }

    attribute_map = {
        'painless_enabled': 'painless_enabled',
        'mustache_enabled': 'mustache_enabled',
        'expressions_enabled': 'expressions_enabled',
        'stored': 'stored',
        'file': 'file',
        'inline': 'inline'
    }

    def __init__(self, painless_enabled=None, mustache_enabled=None, expressions_enabled=None, stored=None, file=None, inline=None):
        """
        ElasticsearchScriptingUserSettings - a model defined in Swagger
        """

        self._painless_enabled = None
        self._mustache_enabled = None
        self._expressions_enabled = None
        self._stored = None
        self._file = None
        self._inline = None

        if painless_enabled is not None:
          self.painless_enabled = painless_enabled
        if mustache_enabled is not None:
          self.mustache_enabled = mustache_enabled
        if expressions_enabled is not None:
          self.expressions_enabled = expressions_enabled
        if stored is not None:
          self.stored = stored
        if file is not None:
          self.file = file
        if inline is not None:
          self.inline = inline

    @property
    def painless_enabled(self):
        """
        Gets the painless_enabled of this ElasticsearchScriptingUserSettings.
        (5.x+ only) If enabled (the default) then the painless scripting engine is allowed as a sandboxed language. Sandboxed languages are the only ones allowed if 'sandbox_mode' is set to true. NOTES: (Corresponds to the parameters 'script.engine.painless.[file|stored|inline]')

        :return: The painless_enabled of this ElasticsearchScriptingUserSettings.
        :rtype: bool
        """
        return self._painless_enabled

    @painless_enabled.setter
    def painless_enabled(self, painless_enabled):
        """
        Sets the painless_enabled of this ElasticsearchScriptingUserSettings.
        (5.x+ only) If enabled (the default) then the painless scripting engine is allowed as a sandboxed language. Sandboxed languages are the only ones allowed if 'sandbox_mode' is set to true. NOTES: (Corresponds to the parameters 'script.engine.painless.[file|stored|inline]')

        :param painless_enabled: The painless_enabled of this ElasticsearchScriptingUserSettings.
        :type: bool
        """

        self._painless_enabled = painless_enabled

    @property
    def mustache_enabled(self):
        """
        Gets the mustache_enabled of this ElasticsearchScriptingUserSettings.
        (5.x+ only) If enabled (the default) then the mustache scripting engine is allowed as a sandboxed language. Sandboxed languages are the only ones allowed if 'sandbox_mode' is set to true. NOTES: (Corresponds to the parameters 'script.engine.mustache.[file|stored|inline]')

        :return: The mustache_enabled of this ElasticsearchScriptingUserSettings.
        :rtype: bool
        """
        return self._mustache_enabled

    @mustache_enabled.setter
    def mustache_enabled(self, mustache_enabled):
        """
        Sets the mustache_enabled of this ElasticsearchScriptingUserSettings.
        (5.x+ only) If enabled (the default) then the mustache scripting engine is allowed as a sandboxed language. Sandboxed languages are the only ones allowed if 'sandbox_mode' is set to true. NOTES: (Corresponds to the parameters 'script.engine.mustache.[file|stored|inline]')

        :param mustache_enabled: The mustache_enabled of this ElasticsearchScriptingUserSettings.
        :type: bool
        """

        self._mustache_enabled = mustache_enabled

    @property
    def expressions_enabled(self):
        """
        Gets the expressions_enabled of this ElasticsearchScriptingUserSettings.
        (5.x+ only) If enabled (the default) then the expressions scripting engine is allowed as a sandboxed language. Sandboxed languages are the only ones allowed if 'sandbox_mode' is set to true. NOTES: (Corresponds to the parameters 'script.engine.expression.[file|stored|inline]')

        :return: The expressions_enabled of this ElasticsearchScriptingUserSettings.
        :rtype: bool
        """
        return self._expressions_enabled

    @expressions_enabled.setter
    def expressions_enabled(self, expressions_enabled):
        """
        Sets the expressions_enabled of this ElasticsearchScriptingUserSettings.
        (5.x+ only) If enabled (the default) then the expressions scripting engine is allowed as a sandboxed language. Sandboxed languages are the only ones allowed if 'sandbox_mode' is set to true. NOTES: (Corresponds to the parameters 'script.engine.expression.[file|stored|inline]')

        :param expressions_enabled: The expressions_enabled of this ElasticsearchScriptingUserSettings.
        :type: bool
        """

        self._expressions_enabled = expressions_enabled

    @property
    def stored(self):
        """
        Gets the stored of this ElasticsearchScriptingUserSettings.

        :return: The stored of this ElasticsearchScriptingUserSettings.
        :rtype: ElasticsearchScriptTypeSettings
        """
        return self._stored

    @stored.setter
    def stored(self, stored):
        """
        Sets the stored of this ElasticsearchScriptingUserSettings.

        :param stored: The stored of this ElasticsearchScriptingUserSettings.
        :type: ElasticsearchScriptTypeSettings
        """

        self._stored = stored

    @property
    def file(self):
        """
        Gets the file of this ElasticsearchScriptingUserSettings.

        :return: The file of this ElasticsearchScriptingUserSettings.
        :rtype: ElasticsearchScriptTypeSettings
        """
        return self._file

    @file.setter
    def file(self, file):
        """
        Sets the file of this ElasticsearchScriptingUserSettings.

        :param file: The file of this ElasticsearchScriptingUserSettings.
        :type: ElasticsearchScriptTypeSettings
        """

        self._file = file

    @property
    def inline(self):
        """
        Gets the inline of this ElasticsearchScriptingUserSettings.

        :return: The inline of this ElasticsearchScriptingUserSettings.
        :rtype: ElasticsearchScriptTypeSettings
        """
        return self._inline

    @inline.setter
    def inline(self, inline):
        """
        Sets the inline of this ElasticsearchScriptingUserSettings.

        :param inline: The inline of this ElasticsearchScriptingUserSettings.
        :type: ElasticsearchScriptTypeSettings
        """

        self._inline = inline

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ElasticsearchScriptingUserSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
