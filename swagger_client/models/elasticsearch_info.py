# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ElasticsearchInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'healthy': 'bool',
        'shard_info': 'ElasticsearchShardsInfo',
        'master_info': 'ElasticsearchMasterInfo',
        'blocking_issues': 'ElasticsearchClusterBlockingIssues'
    }

    attribute_map = {
        'healthy': 'healthy',
        'shard_info': 'shard_info',
        'master_info': 'master_info',
        'blocking_issues': 'blocking_issues'
    }

    def __init__(self, healthy=None, shard_info=None, master_info=None, blocking_issues=None):
        """
        ElasticsearchInfo - a model defined in Swagger
        """

        self._healthy = None
        self._shard_info = None
        self._master_info = None
        self._blocking_issues = None

        self.healthy = healthy
        self.shard_info = shard_info
        self.master_info = master_info
        if blocking_issues is not None:
          self.blocking_issues = blocking_issues

    @property
    def healthy(self):
        """
        Gets the healthy of this ElasticsearchInfo.
        Whether the Elasticsearch cluster is healthy (check the sub-objects for more details if not)

        :return: The healthy of this ElasticsearchInfo.
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """
        Sets the healthy of this ElasticsearchInfo.
        Whether the Elasticsearch cluster is healthy (check the sub-objects for more details if not)

        :param healthy: The healthy of this ElasticsearchInfo.
        :type: bool
        """
        if healthy is None:
            raise ValueError("Invalid value for `healthy`, must not be `None`")

        self._healthy = healthy

    @property
    def shard_info(self):
        """
        Gets the shard_info of this ElasticsearchInfo.

        :return: The shard_info of this ElasticsearchInfo.
        :rtype: ElasticsearchShardsInfo
        """
        return self._shard_info

    @shard_info.setter
    def shard_info(self, shard_info):
        """
        Sets the shard_info of this ElasticsearchInfo.

        :param shard_info: The shard_info of this ElasticsearchInfo.
        :type: ElasticsearchShardsInfo
        """
        if shard_info is None:
            raise ValueError("Invalid value for `shard_info`, must not be `None`")

        self._shard_info = shard_info

    @property
    def master_info(self):
        """
        Gets the master_info of this ElasticsearchInfo.

        :return: The master_info of this ElasticsearchInfo.
        :rtype: ElasticsearchMasterInfo
        """
        return self._master_info

    @master_info.setter
    def master_info(self, master_info):
        """
        Sets the master_info of this ElasticsearchInfo.

        :param master_info: The master_info of this ElasticsearchInfo.
        :type: ElasticsearchMasterInfo
        """
        if master_info is None:
            raise ValueError("Invalid value for `master_info`, must not be `None`")

        self._master_info = master_info

    @property
    def blocking_issues(self):
        """
        Gets the blocking_issues of this ElasticsearchInfo.

        :return: The blocking_issues of this ElasticsearchInfo.
        :rtype: ElasticsearchClusterBlockingIssues
        """
        return self._blocking_issues

    @blocking_issues.setter
    def blocking_issues(self, blocking_issues):
        """
        Sets the blocking_issues of this ElasticsearchInfo.

        :param blocking_issues: The blocking_issues of this ElasticsearchInfo.
        :type: ElasticsearchClusterBlockingIssues
        """

        self._blocking_issues = blocking_issues

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ElasticsearchInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
