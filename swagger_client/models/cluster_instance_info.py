# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClusterInstanceInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instance_name': 'str',
        'service_version': 'str',
        'service_id': 'str',
        'healthy': 'bool',
        'container_started': 'bool',
        'service_running': 'bool',
        'maintenance_mode': 'bool',
        'zone': 'str',
        'allocator_id': 'str',
        'memory': 'ClusterInstanceMemoryInfo',
        'disk': 'ClusterInstanceDiskInfo',
        'service_roles': 'list[str]'
    }

    attribute_map = {
        'instance_name': 'instance_name',
        'service_version': 'service_version',
        'service_id': 'service_id',
        'healthy': 'healthy',
        'container_started': 'container_started',
        'service_running': 'service_running',
        'maintenance_mode': 'maintenance_mode',
        'zone': 'zone',
        'allocator_id': 'allocator_id',
        'memory': 'memory',
        'disk': 'disk',
        'service_roles': 'service_roles'
    }

    def __init__(self, instance_name=None, service_version=None, service_id=None, healthy=None, container_started=None, service_running=None, maintenance_mode=None, zone=None, allocator_id=None, memory=None, disk=None, service_roles=None):
        """
        ClusterInstanceInfo - a model defined in Swagger
        """

        self._instance_name = None
        self._service_version = None
        self._service_id = None
        self._healthy = None
        self._container_started = None
        self._service_running = None
        self._maintenance_mode = None
        self._zone = None
        self._allocator_id = None
        self._memory = None
        self._disk = None
        self._service_roles = None

        self.instance_name = instance_name
        if service_version is not None:
          self.service_version = service_version
        if service_id is not None:
          self.service_id = service_id
        self.healthy = healthy
        self.container_started = container_started
        self.service_running = service_running
        self.maintenance_mode = maintenance_mode
        if zone is not None:
          self.zone = zone
        if allocator_id is not None:
          self.allocator_id = allocator_id
        if memory is not None:
          self.memory = memory
        if disk is not None:
          self.disk = disk
        if service_roles is not None:
          self.service_roles = service_roles

    @property
    def instance_name(self):
        """
        Gets the instance_name of this ClusterInstanceInfo.
        Whether the instance is healthy (ie started and running)

        :return: The instance_name of this ClusterInstanceInfo.
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """
        Sets the instance_name of this ClusterInstanceInfo.
        Whether the instance is healthy (ie started and running)

        :param instance_name: The instance_name of this ClusterInstanceInfo.
        :type: str
        """
        if instance_name is None:
            raise ValueError("Invalid value for `instance_name`, must not be `None`")

        self._instance_name = instance_name

    @property
    def service_version(self):
        """
        Gets the service_version of this ClusterInstanceInfo.
        The version of the service that the instance is running (eg Elasticsearch or Kibana), if available

        :return: The service_version of this ClusterInstanceInfo.
        :rtype: str
        """
        return self._service_version

    @service_version.setter
    def service_version(self, service_version):
        """
        Sets the service_version of this ClusterInstanceInfo.
        The version of the service that the instance is running (eg Elasticsearch or Kibana), if available

        :param service_version: The service_version of this ClusterInstanceInfo.
        :type: str
        """

        self._service_version = service_version

    @property
    def service_id(self):
        """
        Gets the service_id of this ClusterInstanceInfo.
        The service-specific (eg Elasticsearch) id of the node, if available

        :return: The service_id of this ClusterInstanceInfo.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """
        Sets the service_id of this ClusterInstanceInfo.
        The service-specific (eg Elasticsearch) id of the node, if available

        :param service_id: The service_id of this ClusterInstanceInfo.
        :type: str
        """

        self._service_id = service_id

    @property
    def healthy(self):
        """
        Gets the healthy of this ClusterInstanceInfo.
        Whether the instance is healthy (ie started and running)

        :return: The healthy of this ClusterInstanceInfo.
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """
        Sets the healthy of this ClusterInstanceInfo.
        Whether the instance is healthy (ie started and running)

        :param healthy: The healthy of this ClusterInstanceInfo.
        :type: bool
        """
        if healthy is None:
            raise ValueError("Invalid value for `healthy`, must not be `None`")

        self._healthy = healthy

    @property
    def container_started(self):
        """
        Gets the container_started of this ClusterInstanceInfo.
        Whether the container has started (does not tell you anything about the service -ie Elasticsearch- running inside the container)

        :return: The container_started of this ClusterInstanceInfo.
        :rtype: bool
        """
        return self._container_started

    @container_started.setter
    def container_started(self, container_started):
        """
        Sets the container_started of this ClusterInstanceInfo.
        Whether the container has started (does not tell you anything about the service -ie Elasticsearch- running inside the container)

        :param container_started: The container_started of this ClusterInstanceInfo.
        :type: bool
        """
        if container_started is None:
            raise ValueError("Invalid value for `container_started`, must not be `None`")

        self._container_started = container_started

    @property
    def service_running(self):
        """
        Gets the service_running of this ClusterInstanceInfo.
        Whether the service launched inside the container -ie Elasticsearch- is actually running

        :return: The service_running of this ClusterInstanceInfo.
        :rtype: bool
        """
        return self._service_running

    @service_running.setter
    def service_running(self, service_running):
        """
        Sets the service_running of this ClusterInstanceInfo.
        Whether the service launched inside the container -ie Elasticsearch- is actually running

        :param service_running: The service_running of this ClusterInstanceInfo.
        :type: bool
        """
        if service_running is None:
            raise ValueError("Invalid value for `service_running`, must not be `None`")

        self._service_running = service_running

    @property
    def maintenance_mode(self):
        """
        Gets the maintenance_mode of this ClusterInstanceInfo.
        Whether the service is is maintenance mode (meaning that the proxy is not routing external traffic to it)

        :return: The maintenance_mode of this ClusterInstanceInfo.
        :rtype: bool
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """
        Sets the maintenance_mode of this ClusterInstanceInfo.
        Whether the service is is maintenance mode (meaning that the proxy is not routing external traffic to it)

        :param maintenance_mode: The maintenance_mode of this ClusterInstanceInfo.
        :type: bool
        """
        if maintenance_mode is None:
            raise ValueError("Invalid value for `maintenance_mode`, must not be `None`")

        self._maintenance_mode = maintenance_mode

    @property
    def zone(self):
        """
        Gets the zone of this ClusterInstanceInfo.
        The zone in which this instance is being allocated

        :return: The zone of this ClusterInstanceInfo.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """
        Sets the zone of this ClusterInstanceInfo.
        The zone in which this instance is being allocated

        :param zone: The zone of this ClusterInstanceInfo.
        :type: str
        """

        self._zone = zone

    @property
    def allocator_id(self):
        """
        Gets the allocator_id of this ClusterInstanceInfo.
        The id of the allocator on which this instance is running (if the container is started or starting)

        :return: The allocator_id of this ClusterInstanceInfo.
        :rtype: str
        """
        return self._allocator_id

    @allocator_id.setter
    def allocator_id(self, allocator_id):
        """
        Sets the allocator_id of this ClusterInstanceInfo.
        The id of the allocator on which this instance is running (if the container is started or starting)

        :param allocator_id: The allocator_id of this ClusterInstanceInfo.
        :type: str
        """

        self._allocator_id = allocator_id

    @property
    def memory(self):
        """
        Gets the memory of this ClusterInstanceInfo.

        :return: The memory of this ClusterInstanceInfo.
        :rtype: ClusterInstanceMemoryInfo
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """
        Sets the memory of this ClusterInstanceInfo.

        :param memory: The memory of this ClusterInstanceInfo.
        :type: ClusterInstanceMemoryInfo
        """

        self._memory = memory

    @property
    def disk(self):
        """
        Gets the disk of this ClusterInstanceInfo.

        :return: The disk of this ClusterInstanceInfo.
        :rtype: ClusterInstanceDiskInfo
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """
        Sets the disk of this ClusterInstanceInfo.

        :param disk: The disk of this ClusterInstanceInfo.
        :type: ClusterInstanceDiskInfo
        """

        self._disk = disk

    @property
    def service_roles(self):
        """
        Gets the service_roles of this ClusterInstanceInfo.
        List of roles assigned to the service running in the instance. Currently only populated for Elasticsearch, with possible values: master,data,ingest

        :return: The service_roles of this ClusterInstanceInfo.
        :rtype: list[str]
        """
        return self._service_roles

    @service_roles.setter
    def service_roles(self, service_roles):
        """
        Sets the service_roles of this ClusterInstanceInfo.
        List of roles assigned to the service running in the instance. Currently only populated for Elasticsearch, with possible values: master,data,ingest

        :param service_roles: The service_roles of this ClusterInstanceInfo.
        :type: list[str]
        """

        self._service_roles = service_roles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClusterInstanceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
