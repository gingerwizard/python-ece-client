# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NestedQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query': 'QueryContainer',
        'path': 'str',
        'score_mode': 'str'
    }

    attribute_map = {
        'query': 'query',
        'path': 'path',
        'score_mode': 'score_mode'
    }

    def __init__(self, query=None, path=None, score_mode=None):
        """
        NestedQuery - a model defined in Swagger
        """

        self._query = None
        self._path = None
        self._score_mode = None

        self.query = query
        self.path = path
        if score_mode is not None:
          self.score_mode = score_mode

    @property
    def query(self):
        """
        Gets the query of this NestedQuery.
        The actual query to execute on the nested objects.

        :return: The query of this NestedQuery.
        :rtype: QueryContainer
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this NestedQuery.
        The actual query to execute on the nested objects.

        :param query: The query of this NestedQuery.
        :type: QueryContainer
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def path(self):
        """
        Gets the path of this NestedQuery.
        The path to the nested object.

        :return: The path of this NestedQuery.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this NestedQuery.
        The path to the nested object.

        :param path: The path of this NestedQuery.
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def score_mode(self):
        """
        Gets the score_mode of this NestedQuery.
        Allows to specify how inner children matching affects score of the parent. Refer to the Elasticsearch documentation for details.

        :return: The score_mode of this NestedQuery.
        :rtype: str
        """
        return self._score_mode

    @score_mode.setter
    def score_mode(self, score_mode):
        """
        Sets the score_mode of this NestedQuery.
        Allows to specify how inner children matching affects score of the parent. Refer to the Elasticsearch documentation for details.

        :param score_mode: The score_mode of this NestedQuery.
        :type: str
        """
        allowed_values = ["avg", "sum", "min", "max", "none"]
        if score_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `score_mode` ({0}), must be one of {1}"
                .format(score_mode, allowed_values)
            )

        self._score_mode = score_mode

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NestedQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
