# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class MoveKibanaClusterDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'calculated_plan': 'TransientKibanaPlanConfiguration',
        'errors': 'list[BasicFailedReply]'
    }

    attribute_map = {
        'cluster_id': 'cluster_id',
        'calculated_plan': 'calculated_plan',
        'errors': 'errors'
    }

    def __init__(self, cluster_id=None, calculated_plan=None, errors=None):
        """
        MoveKibanaClusterDetails - a model defined in Swagger
        """

        self._cluster_id = None
        self._calculated_plan = None
        self._errors = None

        if cluster_id is not None:
          self.cluster_id = cluster_id
        if calculated_plan is not None:
          self.calculated_plan = calculated_plan
        if errors is not None:
          self.errors = errors

    @property
    def cluster_id(self):
        """
        Gets the cluster_id of this MoveKibanaClusterDetails.
        Identifier for the Kibana cluster.

        :return: The cluster_id of this MoveKibanaClusterDetails.
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """
        Sets the cluster_id of this MoveKibanaClusterDetails.
        Identifier for the Kibana cluster.

        :param cluster_id: The cluster_id of this MoveKibanaClusterDetails.
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def calculated_plan(self):
        """
        Gets the calculated_plan of this MoveKibanaClusterDetails.
        If only validating the move, then the plan configuration that would be applied to the cluster.

        :return: The calculated_plan of this MoveKibanaClusterDetails.
        :rtype: TransientKibanaPlanConfiguration
        """
        return self._calculated_plan

    @calculated_plan.setter
    def calculated_plan(self, calculated_plan):
        """
        Sets the calculated_plan of this MoveKibanaClusterDetails.
        If only validating the move, then the plan configuration that would be applied to the cluster.

        :param calculated_plan: The calculated_plan of this MoveKibanaClusterDetails.
        :type: TransientKibanaPlanConfiguration
        """

        self._calculated_plan = calculated_plan

    @property
    def errors(self):
        """
        Gets the errors of this MoveKibanaClusterDetails.
        A list of errors that occurred if the attempt to move the cluster failed.

        :return: The errors of this MoveKibanaClusterDetails.
        :rtype: list[BasicFailedReply]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """
        Sets the errors of this MoveKibanaClusterDetails.
        A list of errors that occurred if the attempt to move the cluster failed.

        :param errors: The errors of this MoveKibanaClusterDetails.
        :type: list[BasicFailedReply]
        """

        self._errors = errors

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MoveKibanaClusterDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
