# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class KibanaClusterPlan(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'zone_count': 'int',
        'cluster_topology': 'list[KibanaClusterTopologyElement]',
        'kibana': 'KibanaConfiguration',
        'transient': 'TransientKibanaPlanConfiguration'
    }

    attribute_map = {
        'zone_count': 'zone_count',
        'cluster_topology': 'cluster_topology',
        'kibana': 'kibana',
        'transient': 'transient'
    }

    def __init__(self, zone_count=None, cluster_topology=None, kibana=None, transient=None):
        """
        KibanaClusterPlan - a model defined in Swagger
        """

        self._zone_count = None
        self._cluster_topology = None
        self._kibana = None
        self._transient = None

        self.zone_count = zone_count
        if cluster_topology is not None:
          self.cluster_topology = cluster_topology
        self.kibana = kibana
        if transient is not None:
          self.transient = transient

    @property
    def zone_count(self):
        """
        Gets the zone_count of this KibanaClusterPlan.
        The number of zones in which data nodes will be placed

        :return: The zone_count of this KibanaClusterPlan.
        :rtype: int
        """
        return self._zone_count

    @zone_count.setter
    def zone_count(self, zone_count):
        """
        Sets the zone_count of this KibanaClusterPlan.
        The number of zones in which data nodes will be placed

        :param zone_count: The zone_count of this KibanaClusterPlan.
        :type: int
        """
        if zone_count is None:
            raise ValueError("Invalid value for `zone_count`, must not be `None`")

        self._zone_count = zone_count

    @property
    def cluster_topology(self):
        """
        Gets the cluster_topology of this KibanaClusterPlan.

        :return: The cluster_topology of this KibanaClusterPlan.
        :rtype: list[KibanaClusterTopologyElement]
        """
        return self._cluster_topology

    @cluster_topology.setter
    def cluster_topology(self, cluster_topology):
        """
        Sets the cluster_topology of this KibanaClusterPlan.

        :param cluster_topology: The cluster_topology of this KibanaClusterPlan.
        :type: list[KibanaClusterTopologyElement]
        """

        self._cluster_topology = cluster_topology

    @property
    def kibana(self):
        """
        Gets the kibana of this KibanaClusterPlan.

        :return: The kibana of this KibanaClusterPlan.
        :rtype: KibanaConfiguration
        """
        return self._kibana

    @kibana.setter
    def kibana(self, kibana):
        """
        Sets the kibana of this KibanaClusterPlan.

        :param kibana: The kibana of this KibanaClusterPlan.
        :type: KibanaConfiguration
        """
        if kibana is None:
            raise ValueError("Invalid value for `kibana`, must not be `None`")

        self._kibana = kibana

    @property
    def transient(self):
        """
        Gets the transient of this KibanaClusterPlan.

        :return: The transient of this KibanaClusterPlan.
        :rtype: TransientKibanaPlanConfiguration
        """
        return self._transient

    @transient.setter
    def transient(self, transient):
        """
        Sets the transient of this KibanaClusterPlan.

        :param transient: The transient of this KibanaClusterPlan.
        :type: TransientKibanaPlanConfiguration
        """

        self._transient = transient

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, KibanaClusterPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
