# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class QueryStringQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'query': 'str',
        'default_field': 'str',
        'analyzer': 'str',
        'default_operator': 'str',
        'allow_leading_wildcard': 'bool'
    }

    attribute_map = {
        'query': 'query',
        'default_field': 'default_field',
        'analyzer': 'analyzer',
        'default_operator': 'default_operator',
        'allow_leading_wildcard': 'allow_leading_wildcard'
    }

    def __init__(self, query=None, default_field=None, analyzer=None, default_operator=None, allow_leading_wildcard=None):
        """
        QueryStringQuery - a model defined in Swagger
        """

        self._query = None
        self._default_field = None
        self._analyzer = None
        self._default_operator = None
        self._allow_leading_wildcard = None

        self.query = query
        if default_field is not None:
          self.default_field = default_field
        if analyzer is not None:
          self.analyzer = analyzer
        if default_operator is not None:
          self.default_operator = default_operator
        if allow_leading_wildcard is not None:
          self.allow_leading_wildcard = allow_leading_wildcard

    @property
    def query(self):
        """
        Gets the query of this QueryStringQuery.
        The actual query to be parsed.

        :return: The query of this QueryStringQuery.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this QueryStringQuery.
        The actual query to be parsed.

        :param query: The query of this QueryStringQuery.
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def default_field(self):
        """
        Gets the default_field of this QueryStringQuery.
        The default field for query terms if no prefix field is specified.

        :return: The default_field of this QueryStringQuery.
        :rtype: str
        """
        return self._default_field

    @default_field.setter
    def default_field(self, default_field):
        """
        Sets the default_field of this QueryStringQuery.
        The default field for query terms if no prefix field is specified.

        :param default_field: The default_field of this QueryStringQuery.
        :type: str
        """

        self._default_field = default_field

    @property
    def analyzer(self):
        """
        Gets the analyzer of this QueryStringQuery.
        The analyzer used to analyze each term of the query when creating composite queries.

        :return: The analyzer of this QueryStringQuery.
        :rtype: str
        """
        return self._analyzer

    @analyzer.setter
    def analyzer(self, analyzer):
        """
        Sets the analyzer of this QueryStringQuery.
        The analyzer used to analyze each term of the query when creating composite queries.

        :param analyzer: The analyzer of this QueryStringQuery.
        :type: str
        """

        self._analyzer = analyzer

    @property
    def default_operator(self):
        """
        Gets the default_operator of this QueryStringQuery.
        The default operator used if no explicit operator is specified.

        :return: The default_operator of this QueryStringQuery.
        :rtype: str
        """
        return self._default_operator

    @default_operator.setter
    def default_operator(self, default_operator):
        """
        Sets the default_operator of this QueryStringQuery.
        The default operator used if no explicit operator is specified.

        :param default_operator: The default_operator of this QueryStringQuery.
        :type: str
        """

        self._default_operator = default_operator

    @property
    def allow_leading_wildcard(self):
        """
        Gets the allow_leading_wildcard of this QueryStringQuery.
        When set, * or ? are allowed as the first character. Defaults to false.

        :return: The allow_leading_wildcard of this QueryStringQuery.
        :rtype: bool
        """
        return self._allow_leading_wildcard

    @allow_leading_wildcard.setter
    def allow_leading_wildcard(self, allow_leading_wildcard):
        """
        Sets the allow_leading_wildcard of this QueryStringQuery.
        When set, * or ? are allowed as the first character. Defaults to false.

        :param allow_leading_wildcard: The allow_leading_wildcard of this QueryStringQuery.
        :type: bool
        """

        self._allow_leading_wildcard = allow_leading_wildcard

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, QueryStringQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
