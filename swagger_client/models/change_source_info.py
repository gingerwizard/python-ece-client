# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ChangeSourceInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'facilitator': 'str',
        'action': 'str',
        'date': 'datetime',
        'user_id': 'str',
        'admin_id': 'str',
        'remote_addresses': 'list[str]'
    }

    attribute_map = {
        'facilitator': 'facilitator',
        'action': 'action',
        'date': 'date',
        'user_id': 'user_id',
        'admin_id': 'admin_id',
        'remote_addresses': 'remote_addresses'
    }

    def __init__(self, facilitator=None, action=None, date=None, user_id=None, admin_id=None, remote_addresses=None):
        """
        ChangeSourceInfo - a model defined in Swagger
        """

        self._facilitator = None
        self._action = None
        self._date = None
        self._user_id = None
        self._admin_id = None
        self._remote_addresses = None

        self.facilitator = facilitator
        self.action = action
        self.date = date
        if user_id is not None:
          self.user_id = user_id
        if admin_id is not None:
          self.admin_id = admin_id
        if remote_addresses is not None:
          self.remote_addresses = remote_addresses

    @property
    def facilitator(self):
        """
        Gets the facilitator of this ChangeSourceInfo.
        The service where the change originated from

        :return: The facilitator of this ChangeSourceInfo.
        :rtype: str
        """
        return self._facilitator

    @facilitator.setter
    def facilitator(self, facilitator):
        """
        Sets the facilitator of this ChangeSourceInfo.
        The service where the change originated from

        :param facilitator: The facilitator of this ChangeSourceInfo.
        :type: str
        """
        if facilitator is None:
            raise ValueError("Invalid value for `facilitator`, must not be `None`")

        self._facilitator = facilitator

    @property
    def action(self):
        """
        Gets the action of this ChangeSourceInfo.
        The type of plan change that was initiated

        :return: The action of this ChangeSourceInfo.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this ChangeSourceInfo.
        The type of plan change that was initiated

        :param action: The action of this ChangeSourceInfo.
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def date(self):
        """
        Gets the date of this ChangeSourceInfo.
        The time the change was initiated

        :return: The date of this ChangeSourceInfo.
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this ChangeSourceInfo.
        The time the change was initiated

        :param date: The date of this ChangeSourceInfo.
        :type: datetime
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")

        self._date = date

    @property
    def user_id(self):
        """
        Gets the user_id of this ChangeSourceInfo.
        The user that requested the change

        :return: The user_id of this ChangeSourceInfo.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this ChangeSourceInfo.
        The user that requested the change

        :param user_id: The user_id of this ChangeSourceInfo.
        :type: str
        """

        self._user_id = user_id

    @property
    def admin_id(self):
        """
        Gets the admin_id of this ChangeSourceInfo.
        The admin user that requested the change

        :return: The admin_id of this ChangeSourceInfo.
        :rtype: str
        """
        return self._admin_id

    @admin_id.setter
    def admin_id(self, admin_id):
        """
        Sets the admin_id of this ChangeSourceInfo.
        The admin user that requested the change

        :param admin_id: The admin_id of this ChangeSourceInfo.
        :type: str
        """

        self._admin_id = admin_id

    @property
    def remote_addresses(self):
        """
        Gets the remote_addresses of this ChangeSourceInfo.
        The host addresses of the user that originated the change

        :return: The remote_addresses of this ChangeSourceInfo.
        :rtype: list[str]
        """
        return self._remote_addresses

    @remote_addresses.setter
    def remote_addresses(self, remote_addresses):
        """
        Sets the remote_addresses of this ChangeSourceInfo.
        The host addresses of the user that originated the change

        :param remote_addresses: The remote_addresses of this ChangeSourceInfo.
        :type: list[str]
        """

        self._remote_addresses = remote_addresses

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ChangeSourceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
