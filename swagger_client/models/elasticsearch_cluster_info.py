# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ElasticsearchClusterInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'cluster_name': 'str',
        'healthy': 'bool',
        'status': 'str',
        'plan_info': 'ElasticsearchClusterPlansInfo',
        'elasticsearch': 'ElasticsearchInfo',
        'metadata': 'ClusterMetadataInfo',
        'topology': 'ClusterTopologyInfo',
        'system_alerts': 'list[ClusterSystemAlert]',
        'associated_kibana_clusters': 'list[KibanaSubClusterInfo]',
        'security': 'ElasticsearchClusterSecurityInfo',
        'elasticsearch_monitoring_info': 'ElasticsearchMonitoringInfo',
        'snapshots': 'SnapshotStatusInfo',
        'external_links': 'list[ExternalHyperlink]',
        'links': 'dict(str, Hyperlink)'
    }

    attribute_map = {
        'cluster_id': 'cluster_id',
        'cluster_name': 'cluster_name',
        'healthy': 'healthy',
        'status': 'status',
        'plan_info': 'plan_info',
        'elasticsearch': 'elasticsearch',
        'metadata': 'metadata',
        'topology': 'topology',
        'system_alerts': 'system_alerts',
        'associated_kibana_clusters': 'associated_kibana_clusters',
        'security': 'security',
        'elasticsearch_monitoring_info': 'elasticsearch_monitoring_info',
        'snapshots': 'snapshots',
        'external_links': 'external_links',
        'links': 'links'
    }

    def __init__(self, cluster_id=None, cluster_name=None, healthy=None, status=None, plan_info=None, elasticsearch=None, metadata=None, topology=None, system_alerts=None, associated_kibana_clusters=None, security=None, elasticsearch_monitoring_info=None, snapshots=None, external_links=None, links=None):
        """
        ElasticsearchClusterInfo - a model defined in Swagger
        """

        self._cluster_id = None
        self._cluster_name = None
        self._healthy = None
        self._status = None
        self._plan_info = None
        self._elasticsearch = None
        self._metadata = None
        self._topology = None
        self._system_alerts = None
        self._associated_kibana_clusters = None
        self._security = None
        self._elasticsearch_monitoring_info = None
        self._snapshots = None
        self._external_links = None
        self._links = None

        self.cluster_id = cluster_id
        self.cluster_name = cluster_name
        self.healthy = healthy
        if status is not None:
          self.status = status
        self.plan_info = plan_info
        self.elasticsearch = elasticsearch
        self.metadata = metadata
        self.topology = topology
        if system_alerts is not None:
          self.system_alerts = system_alerts
        self.associated_kibana_clusters = associated_kibana_clusters
        if security is not None:
          self.security = security
        if elasticsearch_monitoring_info is not None:
          self.elasticsearch_monitoring_info = elasticsearch_monitoring_info
        self.snapshots = snapshots
        self.external_links = external_links
        if links is not None:
          self.links = links

    @property
    def cluster_id(self):
        """
        Gets the cluster_id of this ElasticsearchClusterInfo.
        The id of the cluster

        :return: The cluster_id of this ElasticsearchClusterInfo.
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """
        Sets the cluster_id of this ElasticsearchClusterInfo.
        The id of the cluster

        :param cluster_id: The cluster_id of this ElasticsearchClusterInfo.
        :type: str
        """
        if cluster_id is None:
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")

        self._cluster_id = cluster_id

    @property
    def cluster_name(self):
        """
        Gets the cluster_name of this ElasticsearchClusterInfo.
        The name of the cluster

        :return: The cluster_name of this ElasticsearchClusterInfo.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """
        Sets the cluster_name of this ElasticsearchClusterInfo.
        The name of the cluster

        :param cluster_name: The cluster_name of this ElasticsearchClusterInfo.
        :type: str
        """
        if cluster_name is None:
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")

        self._cluster_name = cluster_name

    @property
    def healthy(self):
        """
        Gets the healthy of this ElasticsearchClusterInfo.
        Whether the cluster is healthy or not (one or more of the info subsections will have healthy: false)

        :return: The healthy of this ElasticsearchClusterInfo.
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """
        Sets the healthy of this ElasticsearchClusterInfo.
        Whether the cluster is healthy or not (one or more of the info subsections will have healthy: false)

        :param healthy: The healthy of this ElasticsearchClusterInfo.
        :type: bool
        """
        if healthy is None:
            raise ValueError("Invalid value for `healthy`, must not be `None`")

        self._healthy = healthy

    @property
    def status(self):
        """
        Gets the status of this ElasticsearchClusterInfo.
        Cluster status

        :return: The status of this ElasticsearchClusterInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ElasticsearchClusterInfo.
        Cluster status

        :param status: The status of this ElasticsearchClusterInfo.
        :type: str
        """
        allowed_values = ["Initializing", "Stopping", "Stopped", "Rebooting", "Restarting", "Reconfiguring", "Started"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def plan_info(self):
        """
        Gets the plan_info of this ElasticsearchClusterInfo.

        :return: The plan_info of this ElasticsearchClusterInfo.
        :rtype: ElasticsearchClusterPlansInfo
        """
        return self._plan_info

    @plan_info.setter
    def plan_info(self, plan_info):
        """
        Sets the plan_info of this ElasticsearchClusterInfo.

        :param plan_info: The plan_info of this ElasticsearchClusterInfo.
        :type: ElasticsearchClusterPlansInfo
        """
        if plan_info is None:
            raise ValueError("Invalid value for `plan_info`, must not be `None`")

        self._plan_info = plan_info

    @property
    def elasticsearch(self):
        """
        Gets the elasticsearch of this ElasticsearchClusterInfo.

        :return: The elasticsearch of this ElasticsearchClusterInfo.
        :rtype: ElasticsearchInfo
        """
        return self._elasticsearch

    @elasticsearch.setter
    def elasticsearch(self, elasticsearch):
        """
        Sets the elasticsearch of this ElasticsearchClusterInfo.

        :param elasticsearch: The elasticsearch of this ElasticsearchClusterInfo.
        :type: ElasticsearchInfo
        """
        if elasticsearch is None:
            raise ValueError("Invalid value for `elasticsearch`, must not be `None`")

        self._elasticsearch = elasticsearch

    @property
    def metadata(self):
        """
        Gets the metadata of this ElasticsearchClusterInfo.

        :return: The metadata of this ElasticsearchClusterInfo.
        :rtype: ClusterMetadataInfo
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this ElasticsearchClusterInfo.

        :param metadata: The metadata of this ElasticsearchClusterInfo.
        :type: ClusterMetadataInfo
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def topology(self):
        """
        Gets the topology of this ElasticsearchClusterInfo.

        :return: The topology of this ElasticsearchClusterInfo.
        :rtype: ClusterTopologyInfo
        """
        return self._topology

    @topology.setter
    def topology(self, topology):
        """
        Sets the topology of this ElasticsearchClusterInfo.

        :param topology: The topology of this ElasticsearchClusterInfo.
        :type: ClusterTopologyInfo
        """
        if topology is None:
            raise ValueError("Invalid value for `topology`, must not be `None`")

        self._topology = topology

    @property
    def system_alerts(self):
        """
        Gets the system_alerts of this ElasticsearchClusterInfo.
        List of cluster system alerts

        :return: The system_alerts of this ElasticsearchClusterInfo.
        :rtype: list[ClusterSystemAlert]
        """
        return self._system_alerts

    @system_alerts.setter
    def system_alerts(self, system_alerts):
        """
        Sets the system_alerts of this ElasticsearchClusterInfo.
        List of cluster system alerts

        :param system_alerts: The system_alerts of this ElasticsearchClusterInfo.
        :type: list[ClusterSystemAlert]
        """

        self._system_alerts = system_alerts

    @property
    def associated_kibana_clusters(self):
        """
        Gets the associated_kibana_clusters of this ElasticsearchClusterInfo.

        :return: The associated_kibana_clusters of this ElasticsearchClusterInfo.
        :rtype: list[KibanaSubClusterInfo]
        """
        return self._associated_kibana_clusters

    @associated_kibana_clusters.setter
    def associated_kibana_clusters(self, associated_kibana_clusters):
        """
        Sets the associated_kibana_clusters of this ElasticsearchClusterInfo.

        :param associated_kibana_clusters: The associated_kibana_clusters of this ElasticsearchClusterInfo.
        :type: list[KibanaSubClusterInfo]
        """
        if associated_kibana_clusters is None:
            raise ValueError("Invalid value for `associated_kibana_clusters`, must not be `None`")

        self._associated_kibana_clusters = associated_kibana_clusters

    @property
    def security(self):
        """
        Gets the security of this ElasticsearchClusterInfo.

        :return: The security of this ElasticsearchClusterInfo.
        :rtype: ElasticsearchClusterSecurityInfo
        """
        return self._security

    @security.setter
    def security(self, security):
        """
        Sets the security of this ElasticsearchClusterInfo.

        :param security: The security of this ElasticsearchClusterInfo.
        :type: ElasticsearchClusterSecurityInfo
        """

        self._security = security

    @property
    def elasticsearch_monitoring_info(self):
        """
        Gets the elasticsearch_monitoring_info of this ElasticsearchClusterInfo.

        :return: The elasticsearch_monitoring_info of this ElasticsearchClusterInfo.
        :rtype: ElasticsearchMonitoringInfo
        """
        return self._elasticsearch_monitoring_info

    @elasticsearch_monitoring_info.setter
    def elasticsearch_monitoring_info(self, elasticsearch_monitoring_info):
        """
        Sets the elasticsearch_monitoring_info of this ElasticsearchClusterInfo.

        :param elasticsearch_monitoring_info: The elasticsearch_monitoring_info of this ElasticsearchClusterInfo.
        :type: ElasticsearchMonitoringInfo
        """

        self._elasticsearch_monitoring_info = elasticsearch_monitoring_info

    @property
    def snapshots(self):
        """
        Gets the snapshots of this ElasticsearchClusterInfo.

        :return: The snapshots of this ElasticsearchClusterInfo.
        :rtype: SnapshotStatusInfo
        """
        return self._snapshots

    @snapshots.setter
    def snapshots(self, snapshots):
        """
        Sets the snapshots of this ElasticsearchClusterInfo.

        :param snapshots: The snapshots of this ElasticsearchClusterInfo.
        :type: SnapshotStatusInfo
        """
        if snapshots is None:
            raise ValueError("Invalid value for `snapshots`, must not be `None`")

        self._snapshots = snapshots

    @property
    def external_links(self):
        """
        Gets the external_links of this ElasticsearchClusterInfo.
        External resources related to the cluster

        :return: The external_links of this ElasticsearchClusterInfo.
        :rtype: list[ExternalHyperlink]
        """
        return self._external_links

    @external_links.setter
    def external_links(self, external_links):
        """
        Sets the external_links of this ElasticsearchClusterInfo.
        External resources related to the cluster

        :param external_links: The external_links of this ElasticsearchClusterInfo.
        :type: list[ExternalHyperlink]
        """
        if external_links is None:
            raise ValueError("Invalid value for `external_links`, must not be `None`")

        self._external_links = external_links

    @property
    def links(self):
        """
        Gets the links of this ElasticsearchClusterInfo.
        A map of application-specific operations (which map to 'operationId's in the Swagger API) to metadata about that operation

        :return: The links of this ElasticsearchClusterInfo.
        :rtype: dict(str, Hyperlink)
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this ElasticsearchClusterInfo.
        A map of application-specific operations (which map to 'operationId's in the Swagger API) to metadata about that operation

        :param links: The links of this ElasticsearchClusterInfo.
        :type: dict(str, Hyperlink)
        """

        self._links = links

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ElasticsearchClusterInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
