# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class KibanaClusterPlanInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'plan_attempt_id': 'str',
        'plan_attempt_name': 'str',
        'healthy': 'bool',
        'attempt_start_time': 'datetime',
        'attempt_end_time': 'datetime',
        'plan_end_time': 'datetime',
        'plan': 'KibanaClusterPlan',
        'plan_attempt_log': 'list[ClusterPlanStepInfo]',
        'source': 'ChangeSourceInfo'
    }

    attribute_map = {
        'plan_attempt_id': 'plan_attempt_id',
        'plan_attempt_name': 'plan_attempt_name',
        'healthy': 'healthy',
        'attempt_start_time': 'attempt_start_time',
        'attempt_end_time': 'attempt_end_time',
        'plan_end_time': 'plan_end_time',
        'plan': 'plan',
        'plan_attempt_log': 'plan_attempt_log',
        'source': 'source'
    }

    def __init__(self, plan_attempt_id=None, plan_attempt_name=None, healthy=None, attempt_start_time=None, attempt_end_time=None, plan_end_time=None, plan=None, plan_attempt_log=None, source=None):
        """
        KibanaClusterPlanInfo - a model defined in Swagger
        """

        self._plan_attempt_id = None
        self._plan_attempt_name = None
        self._healthy = None
        self._attempt_start_time = None
        self._attempt_end_time = None
        self._plan_end_time = None
        self._plan = None
        self._plan_attempt_log = None
        self._source = None

        if plan_attempt_id is not None:
          self.plan_attempt_id = plan_attempt_id
        if plan_attempt_name is not None:
          self.plan_attempt_name = plan_attempt_name
        self.healthy = healthy
        self.attempt_start_time = attempt_start_time
        if attempt_end_time is not None:
          self.attempt_end_time = attempt_end_time
        if plan_end_time is not None:
          self.plan_end_time = plan_end_time
        if plan is not None:
          self.plan = plan
        self.plan_attempt_log = plan_attempt_log
        if source is not None:
          self.source = source

    @property
    def plan_attempt_id(self):
        """
        Gets the plan_attempt_id of this KibanaClusterPlanInfo.
        A UUID for each plan attempt

        :return: The plan_attempt_id of this KibanaClusterPlanInfo.
        :rtype: str
        """
        return self._plan_attempt_id

    @plan_attempt_id.setter
    def plan_attempt_id(self, plan_attempt_id):
        """
        Sets the plan_attempt_id of this KibanaClusterPlanInfo.
        A UUID for each plan attempt

        :param plan_attempt_id: The plan_attempt_id of this KibanaClusterPlanInfo.
        :type: str
        """

        self._plan_attempt_id = plan_attempt_id

    @property
    def plan_attempt_name(self):
        """
        Gets the plan_attempt_name of this KibanaClusterPlanInfo.
        A human readable name for each plan attempt, only populated when retrieving plan histories

        :return: The plan_attempt_name of this KibanaClusterPlanInfo.
        :rtype: str
        """
        return self._plan_attempt_name

    @plan_attempt_name.setter
    def plan_attempt_name(self, plan_attempt_name):
        """
        Sets the plan_attempt_name of this KibanaClusterPlanInfo.
        A human readable name for each plan attempt, only populated when retrieving plan histories

        :param plan_attempt_name: The plan_attempt_name of this KibanaClusterPlanInfo.
        :type: str
        """

        self._plan_attempt_name = plan_attempt_name

    @property
    def healthy(self):
        """
        Gets the healthy of this KibanaClusterPlanInfo.
        Either the plan ended successfully, or is not yet completed (and no errors have occurred)

        :return: The healthy of this KibanaClusterPlanInfo.
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """
        Sets the healthy of this KibanaClusterPlanInfo.
        Either the plan ended successfully, or is not yet completed (and no errors have occurred)

        :param healthy: The healthy of this KibanaClusterPlanInfo.
        :type: bool
        """
        if healthy is None:
            raise ValueError("Invalid value for `healthy`, must not be `None`")

        self._healthy = healthy

    @property
    def attempt_start_time(self):
        """
        Gets the attempt_start_time of this KibanaClusterPlanInfo.
        When this plan attempt (ie to apply the plan to the cluster) started (ISO format in UTC)

        :return: The attempt_start_time of this KibanaClusterPlanInfo.
        :rtype: datetime
        """
        return self._attempt_start_time

    @attempt_start_time.setter
    def attempt_start_time(self, attempt_start_time):
        """
        Sets the attempt_start_time of this KibanaClusterPlanInfo.
        When this plan attempt (ie to apply the plan to the cluster) started (ISO format in UTC)

        :param attempt_start_time: The attempt_start_time of this KibanaClusterPlanInfo.
        :type: datetime
        """
        if attempt_start_time is None:
            raise ValueError("Invalid value for `attempt_start_time`, must not be `None`")

        self._attempt_start_time = attempt_start_time

    @property
    def attempt_end_time(self):
        """
        Gets the attempt_end_time of this KibanaClusterPlanInfo.
        If this plan completed or failed (ie is not pending), when the attempt ended (ISO format in UTC)

        :return: The attempt_end_time of this KibanaClusterPlanInfo.
        :rtype: datetime
        """
        return self._attempt_end_time

    @attempt_end_time.setter
    def attempt_end_time(self, attempt_end_time):
        """
        Sets the attempt_end_time of this KibanaClusterPlanInfo.
        If this plan completed or failed (ie is not pending), when the attempt ended (ISO format in UTC)

        :param attempt_end_time: The attempt_end_time of this KibanaClusterPlanInfo.
        :type: datetime
        """

        self._attempt_end_time = attempt_end_time

    @property
    def plan_end_time(self):
        """
        Gets the plan_end_time of this KibanaClusterPlanInfo.
        If this plan is not current or pending, when the plan was no longer active (ISO format in UTC)

        :return: The plan_end_time of this KibanaClusterPlanInfo.
        :rtype: datetime
        """
        return self._plan_end_time

    @plan_end_time.setter
    def plan_end_time(self, plan_end_time):
        """
        Sets the plan_end_time of this KibanaClusterPlanInfo.
        If this plan is not current or pending, when the plan was no longer active (ISO format in UTC)

        :param plan_end_time: The plan_end_time of this KibanaClusterPlanInfo.
        :type: datetime
        """

        self._plan_end_time = plan_end_time

    @property
    def plan(self):
        """
        Gets the plan of this KibanaClusterPlanInfo.

        :return: The plan of this KibanaClusterPlanInfo.
        :rtype: KibanaClusterPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """
        Sets the plan of this KibanaClusterPlanInfo.

        :param plan: The plan of this KibanaClusterPlanInfo.
        :type: KibanaClusterPlan
        """

        self._plan = plan

    @property
    def plan_attempt_log(self):
        """
        Gets the plan_attempt_log of this KibanaClusterPlanInfo.

        :return: The plan_attempt_log of this KibanaClusterPlanInfo.
        :rtype: list[ClusterPlanStepInfo]
        """
        return self._plan_attempt_log

    @plan_attempt_log.setter
    def plan_attempt_log(self, plan_attempt_log):
        """
        Sets the plan_attempt_log of this KibanaClusterPlanInfo.

        :param plan_attempt_log: The plan_attempt_log of this KibanaClusterPlanInfo.
        :type: list[ClusterPlanStepInfo]
        """
        if plan_attempt_log is None:
            raise ValueError("Invalid value for `plan_attempt_log`, must not be `None`")

        self._plan_attempt_log = plan_attempt_log

    @property
    def source(self):
        """
        Gets the source of this KibanaClusterPlanInfo.
        Information describing the source that facilitated the plans current state

        :return: The source of this KibanaClusterPlanInfo.
        :rtype: ChangeSourceInfo
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this KibanaClusterPlanInfo.
        Information describing the source that facilitated the plans current state

        :param source: The source of this KibanaClusterPlanInfo.
        :type: ChangeSourceInfo
        """

        self._source = source

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, KibanaClusterPlanInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
