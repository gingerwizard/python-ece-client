# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClusterMetadataSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'owner_id': 'str',
        'subscription_level': 'str',
        'system_owned': 'bool',
        'contact_email': 'str'
    }

    attribute_map = {
        'name': 'name',
        'owner_id': 'owner_id',
        'subscription_level': 'subscription_level',
        'system_owned': 'system_owned',
        'contact_email': 'contact_email'
    }

    def __init__(self, name=None, owner_id=None, subscription_level=None, system_owned=None, contact_email=None):
        """
        ClusterMetadataSettings - a model defined in Swagger
        """

        self._name = None
        self._owner_id = None
        self._subscription_level = None
        self._system_owned = None
        self._contact_email = None

        if name is not None:
          self.name = name
        if owner_id is not None:
          self.owner_id = owner_id
        if subscription_level is not None:
          self.subscription_level = subscription_level
        if system_owned is not None:
          self.system_owned = system_owned
        if contact_email is not None:
          self.contact_email = contact_email

    @property
    def name(self):
        """
        Gets the name of this ClusterMetadataSettings.
        The display name of the cluster

        :return: The name of this ClusterMetadataSettings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ClusterMetadataSettings.
        The display name of the cluster

        :param name: The name of this ClusterMetadataSettings.
        :type: str
        """

        self._name = name

    @property
    def owner_id(self):
        """
        Gets the owner_id of this ClusterMetadataSettings.
        The user id (referencing whatever user database is in use) of the cluster owner

        :return: The owner_id of this ClusterMetadataSettings.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this ClusterMetadataSettings.
        The user id (referencing whatever user database is in use) of the cluster owner

        :param owner_id: The owner_id of this ClusterMetadataSettings.
        :type: str
        """

        self._owner_id = owner_id

    @property
    def subscription_level(self):
        """
        Gets the subscription_level of this ClusterMetadataSettings.
        Subscription level of the cluster

        :return: The subscription_level of this ClusterMetadataSettings.
        :rtype: str
        """
        return self._subscription_level

    @subscription_level.setter
    def subscription_level(self, subscription_level):
        """
        Sets the subscription_level of this ClusterMetadataSettings.
        Subscription level of the cluster

        :param subscription_level: The subscription_level of this ClusterMetadataSettings.
        :type: str
        """

        self._subscription_level = subscription_level

    @property
    def system_owned(self):
        """
        Gets the system_owned of this ClusterMetadataSettings.
        Indicates if a cluster is system owned (restricts the set of operations that can be performed on it)

        :return: The system_owned of this ClusterMetadataSettings.
        :rtype: bool
        """
        return self._system_owned

    @system_owned.setter
    def system_owned(self, system_owned):
        """
        Sets the system_owned of this ClusterMetadataSettings.
        Indicates if a cluster is system owned (restricts the set of operations that can be performed on it)

        :param system_owned: The system_owned of this ClusterMetadataSettings.
        :type: bool
        """

        self._system_owned = system_owned

    @property
    def contact_email(self):
        """
        Gets the contact_email of this ClusterMetadataSettings.
        Contact email for the cluster

        :return: The contact_email of this ClusterMetadataSettings.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """
        Sets the contact_email of this ClusterMetadataSettings.
        Contact email for the cluster

        :param contact_email: The contact_email of this ClusterMetadataSettings.
        :type: str
        """

        self._contact_email = contact_email

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClusterMetadataSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
