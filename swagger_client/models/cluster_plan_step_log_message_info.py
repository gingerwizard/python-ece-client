# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClusterPlanStepLogMessageInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'datetime',
        'delta_in_millis': 'int',
        'stage': 'str',
        'message': 'str'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'delta_in_millis': 'delta_in_millis',
        'stage': 'stage',
        'message': 'message'
    }

    def __init__(self, timestamp=None, delta_in_millis=None, stage=None, message=None):
        """
        ClusterPlanStepLogMessageInfo - a model defined in Swagger
        """

        self._timestamp = None
        self._delta_in_millis = None
        self._stage = None
        self._message = None

        self.timestamp = timestamp
        if delta_in_millis is not None:
          self.delta_in_millis = delta_in_millis
        self.stage = stage
        self.message = message

    @property
    def timestamp(self):
        """
        Gets the timestamp of this ClusterPlanStepLogMessageInfo.
        Timestamp marking on info log of step

        :return: The timestamp of this ClusterPlanStepLogMessageInfo.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this ClusterPlanStepLogMessageInfo.
        Timestamp marking on info log of step

        :param timestamp: The timestamp of this ClusterPlanStepLogMessageInfo.
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def delta_in_millis(self):
        """
        Gets the delta_in_millis of this ClusterPlanStepLogMessageInfo.
        Time in milliseconds since previous log message

        :return: The delta_in_millis of this ClusterPlanStepLogMessageInfo.
        :rtype: int
        """
        return self._delta_in_millis

    @delta_in_millis.setter
    def delta_in_millis(self, delta_in_millis):
        """
        Sets the delta_in_millis of this ClusterPlanStepLogMessageInfo.
        Time in milliseconds since previous log message

        :param delta_in_millis: The delta_in_millis of this ClusterPlanStepLogMessageInfo.
        :type: int
        """

        self._delta_in_millis = delta_in_millis

    @property
    def stage(self):
        """
        Gets the stage of this ClusterPlanStepLogMessageInfo.
        Stage that info log message takes place in

        :return: The stage of this ClusterPlanStepLogMessageInfo.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """
        Sets the stage of this ClusterPlanStepLogMessageInfo.
        Stage that info log message takes place in

        :param stage: The stage of this ClusterPlanStepLogMessageInfo.
        :type: str
        """
        if stage is None:
            raise ValueError("Invalid value for `stage`, must not be `None`")
        allowed_values = ["starting", "completed", "in_progress"]
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"
                .format(stage, allowed_values)
            )

        self._stage = stage

    @property
    def message(self):
        """
        Gets the message of this ClusterPlanStepLogMessageInfo.
        Human readable log message

        :return: The message of this ClusterPlanStepLogMessageInfo.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this ClusterPlanStepLogMessageInfo.
        Human readable log message

        :param message: The message of this ClusterPlanStepLogMessageInfo.
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClusterPlanStepLogMessageInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
