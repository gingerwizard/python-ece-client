# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class KibanaPlanControlConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timeout': 'int',
        'calm_wait_time': 'int',
        'move_instances': 'list[InstanceMoveRequest]',
        'move_allocators': 'list[AllocatorMoveRequest]',
        'reallocate_instances': 'bool',
        'preferred_allocators': 'list[str]',
        'extended_maintenance': 'bool',
        'cluster_reboot': 'str'
    }

    attribute_map = {
        'timeout': 'timeout',
        'calm_wait_time': 'calm_wait_time',
        'move_instances': 'move_instances',
        'move_allocators': 'move_allocators',
        'reallocate_instances': 'reallocate_instances',
        'preferred_allocators': 'preferred_allocators',
        'extended_maintenance': 'extended_maintenance',
        'cluster_reboot': 'cluster_reboot'
    }

    def __init__(self, timeout=None, calm_wait_time=None, move_instances=None, move_allocators=None, reallocate_instances=None, preferred_allocators=None, extended_maintenance=None, cluster_reboot=None):
        """
        KibanaPlanControlConfiguration - a model defined in Swagger
        """

        self._timeout = None
        self._calm_wait_time = None
        self._move_instances = None
        self._move_allocators = None
        self._reallocate_instances = None
        self._preferred_allocators = None
        self._extended_maintenance = None
        self._cluster_reboot = None

        if timeout is not None:
          self.timeout = timeout
        if calm_wait_time is not None:
          self.calm_wait_time = calm_wait_time
        if move_instances is not None:
          self.move_instances = move_instances
        if move_allocators is not None:
          self.move_allocators = move_allocators
        if reallocate_instances is not None:
          self.reallocate_instances = reallocate_instances
        if preferred_allocators is not None:
          self.preferred_allocators = preferred_allocators
        if extended_maintenance is not None:
          self.extended_maintenance = extended_maintenance
        if cluster_reboot is not None:
          self.cluster_reboot = cluster_reboot

    @property
    def timeout(self):
        """
        Gets the timeout of this KibanaPlanControlConfiguration.
        The total timeout in seconds after which the plan is cancelled even if it is not complete. Defaults to 4x the max memory capacity per node (in MB)

        :return: The timeout of this KibanaPlanControlConfiguration.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this KibanaPlanControlConfiguration.
        The total timeout in seconds after which the plan is cancelled even if it is not complete. Defaults to 4x the max memory capacity per node (in MB)

        :param timeout: The timeout of this KibanaPlanControlConfiguration.
        :type: int
        """

        self._timeout = timeout

    @property
    def calm_wait_time(self):
        """
        Gets the calm_wait_time of this KibanaPlanControlConfiguration.
        This timeout determines how long to give a cluster after it responds to API calls before performing actual operations on it. It defaults to 5s

        :return: The calm_wait_time of this KibanaPlanControlConfiguration.
        :rtype: int
        """
        return self._calm_wait_time

    @calm_wait_time.setter
    def calm_wait_time(self, calm_wait_time):
        """
        Sets the calm_wait_time of this KibanaPlanControlConfiguration.
        This timeout determines how long to give a cluster after it responds to API calls before performing actual operations on it. It defaults to 5s

        :param calm_wait_time: The calm_wait_time of this KibanaPlanControlConfiguration.
        :type: int
        """

        self._calm_wait_time = calm_wait_time

    @property
    def move_instances(self):
        """
        Gets the move_instances of this KibanaPlanControlConfiguration.

        :return: The move_instances of this KibanaPlanControlConfiguration.
        :rtype: list[InstanceMoveRequest]
        """
        return self._move_instances

    @move_instances.setter
    def move_instances(self, move_instances):
        """
        Sets the move_instances of this KibanaPlanControlConfiguration.

        :param move_instances: The move_instances of this KibanaPlanControlConfiguration.
        :type: list[InstanceMoveRequest]
        """

        self._move_instances = move_instances

    @property
    def move_allocators(self):
        """
        Gets the move_allocators of this KibanaPlanControlConfiguration.

        :return: The move_allocators of this KibanaPlanControlConfiguration.
        :rtype: list[AllocatorMoveRequest]
        """
        return self._move_allocators

    @move_allocators.setter
    def move_allocators(self, move_allocators):
        """
        Sets the move_allocators of this KibanaPlanControlConfiguration.

        :param move_allocators: The move_allocators of this KibanaPlanControlConfiguration.
        :type: list[AllocatorMoveRequest]
        """

        self._move_allocators = move_allocators

    @property
    def reallocate_instances(self):
        """
        Gets the reallocate_instances of this KibanaPlanControlConfiguration.
        If true (default: false) does not allow re-using any existing instances currently in the cluster, ie even unchanged instances will be re-created

        :return: The reallocate_instances of this KibanaPlanControlConfiguration.
        :rtype: bool
        """
        return self._reallocate_instances

    @reallocate_instances.setter
    def reallocate_instances(self, reallocate_instances):
        """
        Sets the reallocate_instances of this KibanaPlanControlConfiguration.
        If true (default: false) does not allow re-using any existing instances currently in the cluster, ie even unchanged instances will be re-created

        :param reallocate_instances: The reallocate_instances of this KibanaPlanControlConfiguration.
        :type: bool
        """

        self._reallocate_instances = reallocate_instances

    @property
    def preferred_allocators(self):
        """
        Gets the preferred_allocators of this KibanaPlanControlConfiguration.
        List of allocators on which instances are placed if possible (if not possible/not specified then any available allocator with space is used)

        :return: The preferred_allocators of this KibanaPlanControlConfiguration.
        :rtype: list[str]
        """
        return self._preferred_allocators

    @preferred_allocators.setter
    def preferred_allocators(self, preferred_allocators):
        """
        Sets the preferred_allocators of this KibanaPlanControlConfiguration.
        List of allocators on which instances are placed if possible (if not possible/not specified then any available allocator with space is used)

        :param preferred_allocators: The preferred_allocators of this KibanaPlanControlConfiguration.
        :type: list[str]
        """

        self._preferred_allocators = preferred_allocators

    @property
    def extended_maintenance(self):
        """
        Gets the extended_maintenance of this KibanaPlanControlConfiguration.
        If true (default false), does not clear the maintenance flag (which prevents its API from being accessed except by the constructor) on new instances added until after a snapshot has been restored, otherwise, the maintenance flag is cleared once the new instances successfully join the new cluster

        :return: The extended_maintenance of this KibanaPlanControlConfiguration.
        :rtype: bool
        """
        return self._extended_maintenance

    @extended_maintenance.setter
    def extended_maintenance(self, extended_maintenance):
        """
        Sets the extended_maintenance of this KibanaPlanControlConfiguration.
        If true (default false), does not clear the maintenance flag (which prevents its API from being accessed except by the constructor) on new instances added until after a snapshot has been restored, otherwise, the maintenance flag is cleared once the new instances successfully join the new cluster

        :param extended_maintenance: The extended_maintenance of this KibanaPlanControlConfiguration.
        :type: bool
        """

        self._extended_maintenance = extended_maintenance

    @property
    def cluster_reboot(self):
        """
        Gets the cluster_reboot of this KibanaPlanControlConfiguration.
        Set to 'forced' to force a reboot as part of the upgrade plan

        :return: The cluster_reboot of this KibanaPlanControlConfiguration.
        :rtype: str
        """
        return self._cluster_reboot

    @cluster_reboot.setter
    def cluster_reboot(self, cluster_reboot):
        """
        Sets the cluster_reboot of this KibanaPlanControlConfiguration.
        Set to 'forced' to force a reboot as part of the upgrade plan

        :param cluster_reboot: The cluster_reboot of this KibanaPlanControlConfiguration.
        :type: str
        """
        allowed_values = ["forced"]
        if cluster_reboot not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_reboot` ({0}), must be one of {1}"
                .format(cluster_reboot, allowed_values)
            )

        self._cluster_reboot = cluster_reboot

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, KibanaPlanControlConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
