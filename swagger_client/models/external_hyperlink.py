# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ExternalHyperlink(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'label': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'uri': 'uri'
    }

    def __init__(self, id=None, label=None, uri=None):
        """
        ExternalHyperlink - a model defined in Swagger
        """

        self._id = None
        self._label = None
        self._uri = None

        self.id = id
        self.label = label
        if uri is not None:
          self.uri = uri

    @property
    def id(self):
        """
        Gets the id of this ExternalHyperlink.
        Identifier of the external link

        :return: The id of this ExternalHyperlink.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ExternalHyperlink.
        Identifier of the external link

        :param id: The id of this ExternalHyperlink.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def label(self):
        """
        Gets the label of this ExternalHyperlink.
        Human-readable description of the external link

        :return: The label of this ExternalHyperlink.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this ExternalHyperlink.
        Human-readable description of the external link

        :param label: The label of this ExternalHyperlink.
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def uri(self):
        """
        Gets the uri of this ExternalHyperlink.
        hyperlink to an external resource

        :return: The uri of this ExternalHyperlink.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this ExternalHyperlink.
        hyperlink to an external resource

        :param uri: The uri of this ExternalHyperlink.
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExternalHyperlink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
