# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClusterCrudResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'elasticsearch_cluster_id': 'str',
        'kibana_cluster_id': 'str',
        'credentials': 'ClusterCredentials',
        'diagnostics': 'object'
    }

    attribute_map = {
        'elasticsearch_cluster_id': 'elasticsearch_cluster_id',
        'kibana_cluster_id': 'kibana_cluster_id',
        'credentials': 'credentials',
        'diagnostics': 'diagnostics'
    }

    def __init__(self, elasticsearch_cluster_id=None, kibana_cluster_id=None, credentials=None, diagnostics=None):
        """
        ClusterCrudResponse - a model defined in Swagger
        """

        self._elasticsearch_cluster_id = None
        self._kibana_cluster_id = None
        self._credentials = None
        self._diagnostics = None

        if elasticsearch_cluster_id is not None:
          self.elasticsearch_cluster_id = elasticsearch_cluster_id
        if kibana_cluster_id is not None:
          self.kibana_cluster_id = kibana_cluster_id
        if credentials is not None:
          self.credentials = credentials
        if diagnostics is not None:
          self.diagnostics = diagnostics

    @property
    def elasticsearch_cluster_id(self):
        """
        Gets the elasticsearch_cluster_id of this ClusterCrudResponse.
        For an operation creating or updating an Elasticsearch cluster, the Id of that cluster

        :return: The elasticsearch_cluster_id of this ClusterCrudResponse.
        :rtype: str
        """
        return self._elasticsearch_cluster_id

    @elasticsearch_cluster_id.setter
    def elasticsearch_cluster_id(self, elasticsearch_cluster_id):
        """
        Sets the elasticsearch_cluster_id of this ClusterCrudResponse.
        For an operation creating or updating an Elasticsearch cluster, the Id of that cluster

        :param elasticsearch_cluster_id: The elasticsearch_cluster_id of this ClusterCrudResponse.
        :type: str
        """

        self._elasticsearch_cluster_id = elasticsearch_cluster_id

    @property
    def kibana_cluster_id(self):
        """
        Gets the kibana_cluster_id of this ClusterCrudResponse.
        For an operation creating or updating a Kibana cluster, the Id of that cluster

        :return: The kibana_cluster_id of this ClusterCrudResponse.
        :rtype: str
        """
        return self._kibana_cluster_id

    @kibana_cluster_id.setter
    def kibana_cluster_id(self, kibana_cluster_id):
        """
        Sets the kibana_cluster_id of this ClusterCrudResponse.
        For an operation creating or updating a Kibana cluster, the Id of that cluster

        :param kibana_cluster_id: The kibana_cluster_id of this ClusterCrudResponse.
        :type: str
        """

        self._kibana_cluster_id = kibana_cluster_id

    @property
    def credentials(self):
        """
        Gets the credentials of this ClusterCrudResponse.

        :return: The credentials of this ClusterCrudResponse.
        :rtype: ClusterCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """
        Sets the credentials of this ClusterCrudResponse.

        :param credentials: The credentials of this ClusterCrudResponse.
        :type: ClusterCredentials
        """

        self._credentials = credentials

    @property
    def diagnostics(self):
        """
        Gets the diagnostics of this ClusterCrudResponse.
        If the endpoint is called with URL param 'validate_only=true', then this contains advanced debug info (the internal plan representation)

        :return: The diagnostics of this ClusterCrudResponse.
        :rtype: object
        """
        return self._diagnostics

    @diagnostics.setter
    def diagnostics(self, diagnostics):
        """
        Sets the diagnostics of this ClusterCrudResponse.
        If the endpoint is called with URL param 'validate_only=true', then this contains advanced debug info (the internal plan representation)

        :param diagnostics: The diagnostics of this ClusterCrudResponse.
        :type: object
        """

        self._diagnostics = diagnostics

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClusterCrudResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
