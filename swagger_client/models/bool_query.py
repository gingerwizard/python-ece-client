# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BoolQuery(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'must': 'list[QueryContainer]',
        'should': 'list[QueryContainer]',
        'must_not': 'list[QueryContainer]',
        'filter': 'list[QueryContainer]',
        'minimum_should_match': 'int'
    }

    attribute_map = {
        'must': 'must',
        'should': 'should',
        'must_not': 'must_not',
        'filter': 'filter',
        'minimum_should_match': 'minimum_should_match'
    }

    def __init__(self, must=None, should=None, must_not=None, filter=None, minimum_should_match=None):
        """
        BoolQuery - a model defined in Swagger
        """

        self._must = None
        self._should = None
        self._must_not = None
        self._filter = None
        self._minimum_should_match = None

        if must is not None:
          self.must = must
        if should is not None:
          self.should = should
        if must_not is not None:
          self.must_not = must_not
        if filter is not None:
          self.filter = filter
        if minimum_should_match is not None:
          self.minimum_should_match = minimum_should_match

    @property
    def must(self):
        """
        Gets the must of this BoolQuery.

        :return: The must of this BoolQuery.
        :rtype: list[QueryContainer]
        """
        return self._must

    @must.setter
    def must(self, must):
        """
        Sets the must of this BoolQuery.

        :param must: The must of this BoolQuery.
        :type: list[QueryContainer]
        """

        self._must = must

    @property
    def should(self):
        """
        Gets the should of this BoolQuery.

        :return: The should of this BoolQuery.
        :rtype: list[QueryContainer]
        """
        return self._should

    @should.setter
    def should(self, should):
        """
        Sets the should of this BoolQuery.

        :param should: The should of this BoolQuery.
        :type: list[QueryContainer]
        """

        self._should = should

    @property
    def must_not(self):
        """
        Gets the must_not of this BoolQuery.

        :return: The must_not of this BoolQuery.
        :rtype: list[QueryContainer]
        """
        return self._must_not

    @must_not.setter
    def must_not(self, must_not):
        """
        Sets the must_not of this BoolQuery.

        :param must_not: The must_not of this BoolQuery.
        :type: list[QueryContainer]
        """

        self._must_not = must_not

    @property
    def filter(self):
        """
        Gets the filter of this BoolQuery.

        :return: The filter of this BoolQuery.
        :rtype: list[QueryContainer]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """
        Sets the filter of this BoolQuery.

        :param filter: The filter of this BoolQuery.
        :type: list[QueryContainer]
        """

        self._filter = filter

    @property
    def minimum_should_match(self):
        """
        Gets the minimum_should_match of this BoolQuery.
        The minimum number of optional should clauses to match.

        :return: The minimum_should_match of this BoolQuery.
        :rtype: int
        """
        return self._minimum_should_match

    @minimum_should_match.setter
    def minimum_should_match(self, minimum_should_match):
        """
        Sets the minimum_should_match of this BoolQuery.
        The minimum number of optional should clauses to match.

        :param minimum_should_match: The minimum_should_match of this BoolQuery.
        :type: int
        """

        self._minimum_should_match = minimum_should_match

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BoolQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
