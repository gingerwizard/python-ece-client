# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TransientElasticsearchPlanConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'strategy': 'PlanStrategy',
        'plan_configuration': 'ElasticsearchPlanControlConfiguration',
        'restore_snapshot': 'RestoreSnapshotConfiguration',
        'cluster_settings_json': 'object'
    }

    attribute_map = {
        'strategy': 'strategy',
        'plan_configuration': 'plan_configuration',
        'restore_snapshot': 'restore_snapshot',
        'cluster_settings_json': 'cluster_settings_json'
    }

    def __init__(self, strategy=None, plan_configuration=None, restore_snapshot=None, cluster_settings_json=None):
        """
        TransientElasticsearchPlanConfiguration - a model defined in Swagger
        """

        self._strategy = None
        self._plan_configuration = None
        self._restore_snapshot = None
        self._cluster_settings_json = None

        if strategy is not None:
          self.strategy = strategy
        if plan_configuration is not None:
          self.plan_configuration = plan_configuration
        if restore_snapshot is not None:
          self.restore_snapshot = restore_snapshot
        if cluster_settings_json is not None:
          self.cluster_settings_json = cluster_settings_json

    @property
    def strategy(self):
        """
        Gets the strategy of this TransientElasticsearchPlanConfiguration.

        :return: The strategy of this TransientElasticsearchPlanConfiguration.
        :rtype: PlanStrategy
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """
        Sets the strategy of this TransientElasticsearchPlanConfiguration.

        :param strategy: The strategy of this TransientElasticsearchPlanConfiguration.
        :type: PlanStrategy
        """

        self._strategy = strategy

    @property
    def plan_configuration(self):
        """
        Gets the plan_configuration of this TransientElasticsearchPlanConfiguration.

        :return: The plan_configuration of this TransientElasticsearchPlanConfiguration.
        :rtype: ElasticsearchPlanControlConfiguration
        """
        return self._plan_configuration

    @plan_configuration.setter
    def plan_configuration(self, plan_configuration):
        """
        Sets the plan_configuration of this TransientElasticsearchPlanConfiguration.

        :param plan_configuration: The plan_configuration of this TransientElasticsearchPlanConfiguration.
        :type: ElasticsearchPlanControlConfiguration
        """

        self._plan_configuration = plan_configuration

    @property
    def restore_snapshot(self):
        """
        Gets the restore_snapshot of this TransientElasticsearchPlanConfiguration.

        :return: The restore_snapshot of this TransientElasticsearchPlanConfiguration.
        :rtype: RestoreSnapshotConfiguration
        """
        return self._restore_snapshot

    @restore_snapshot.setter
    def restore_snapshot(self, restore_snapshot):
        """
        Sets the restore_snapshot of this TransientElasticsearchPlanConfiguration.

        :param restore_snapshot: The restore_snapshot of this TransientElasticsearchPlanConfiguration.
        :type: RestoreSnapshotConfiguration
        """

        self._restore_snapshot = restore_snapshot

    @property
    def cluster_settings_json(self):
        """
        Gets the cluster_settings_json of this TransientElasticsearchPlanConfiguration.
        If specified, contains transient settings to be applied to an Elasticsearch cluster during changes, with the following default values applied. - indices.store.throttle.max_bytes_per_sec: 150Mb - indices.recovery.max_bytes_per_sec: 150Mb - cluster.routing.allocation.cluster_concurrent_rebalance: 10 - cluster.routing.allocation.node_initial_primaries_recoveries: 8 These can be overridden by specifying them in the map. Additional settings can also be set. Settings will be cleared after the plan has finished. If not specified, no settings will be applied.

        :return: The cluster_settings_json of this TransientElasticsearchPlanConfiguration.
        :rtype: object
        """
        return self._cluster_settings_json

    @cluster_settings_json.setter
    def cluster_settings_json(self, cluster_settings_json):
        """
        Sets the cluster_settings_json of this TransientElasticsearchPlanConfiguration.
        If specified, contains transient settings to be applied to an Elasticsearch cluster during changes, with the following default values applied. - indices.store.throttle.max_bytes_per_sec: 150Mb - indices.recovery.max_bytes_per_sec: 150Mb - cluster.routing.allocation.cluster_concurrent_rebalance: 10 - cluster.routing.allocation.node_initial_primaries_recoveries: 8 These can be overridden by specifying them in the map. Additional settings can also be set. Settings will be cleared after the plan has finished. If not specified, no settings will be applied.

        :param cluster_settings_json: The cluster_settings_json of this TransientElasticsearchPlanConfiguration.
        :type: object
        """

        self._cluster_settings_json = cluster_settings_json

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TransientElasticsearchPlanConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
