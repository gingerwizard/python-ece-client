# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ElasticsearchNodeType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'master': 'bool',
        'data': 'bool',
        'ingest': 'bool'
    }

    attribute_map = {
        'master': 'master',
        'data': 'data',
        'ingest': 'ingest'
    }

    def __init__(self, master=None, data=None, ingest=None):
        """
        ElasticsearchNodeType - a model defined in Swagger
        """

        self._master = None
        self._data = None
        self._ingest = None

        if master is not None:
          self.master = master
        if data is not None:
          self.data = data
        if ingest is not None:
          self.ingest = ingest

    @property
    def master(self):
        """
        Gets the master of this ElasticsearchNodeType.
        Defines whether this node can be elected master (default: true)

        :return: The master of this ElasticsearchNodeType.
        :rtype: bool
        """
        return self._master

    @master.setter
    def master(self, master):
        """
        Sets the master of this ElasticsearchNodeType.
        Defines whether this node can be elected master (default: true)

        :param master: The master of this ElasticsearchNodeType.
        :type: bool
        """

        self._master = master

    @property
    def data(self):
        """
        Gets the data of this ElasticsearchNodeType.
        Defines whether this node can hold data (default: true)

        :return: The data of this ElasticsearchNodeType.
        :rtype: bool
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this ElasticsearchNodeType.
        Defines whether this node can hold data (default: true)

        :param data: The data of this ElasticsearchNodeType.
        :type: bool
        """

        self._data = data

    @property
    def ingest(self):
        """
        Gets the ingest of this ElasticsearchNodeType.
        Defines whether this node can run an ingest pipeline (default: true)

        :return: The ingest of this ElasticsearchNodeType.
        :rtype: bool
        """
        return self._ingest

    @ingest.setter
    def ingest(self, ingest):
        """
        Sets the ingest of this ElasticsearchNodeType.
        Defines whether this node can run an ingest pipeline (default: true)

        :param ingest: The ingest of this ElasticsearchNodeType.
        :type: bool
        """

        self._ingest = ingest

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ElasticsearchNodeType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
