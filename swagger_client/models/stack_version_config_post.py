# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StackVersionConfigPost(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'elasticsearch': 'StackVersionElasticsearchConfig',
        'kibana': 'StackVersionKibanaConfig',
        'metadata': 'StackVersionMetadata'
    }

    attribute_map = {
        'elasticsearch': 'elasticsearch',
        'kibana': 'kibana',
        'metadata': 'metadata'
    }

    def __init__(self, elasticsearch=None, kibana=None, metadata=None):
        """
        StackVersionConfigPost - a model defined in Swagger
        """

        self._elasticsearch = None
        self._kibana = None
        self._metadata = None

        if elasticsearch is not None:
          self.elasticsearch = elasticsearch
        if kibana is not None:
          self.kibana = kibana
        if metadata is not None:
          self.metadata = metadata

    @property
    def elasticsearch(self):
        """
        Gets the elasticsearch of this StackVersionConfigPost.

        :return: The elasticsearch of this StackVersionConfigPost.
        :rtype: StackVersionElasticsearchConfig
        """
        return self._elasticsearch

    @elasticsearch.setter
    def elasticsearch(self, elasticsearch):
        """
        Sets the elasticsearch of this StackVersionConfigPost.

        :param elasticsearch: The elasticsearch of this StackVersionConfigPost.
        :type: StackVersionElasticsearchConfig
        """

        self._elasticsearch = elasticsearch

    @property
    def kibana(self):
        """
        Gets the kibana of this StackVersionConfigPost.

        :return: The kibana of this StackVersionConfigPost.
        :rtype: StackVersionKibanaConfig
        """
        return self._kibana

    @kibana.setter
    def kibana(self, kibana):
        """
        Sets the kibana of this StackVersionConfigPost.

        :param kibana: The kibana of this StackVersionConfigPost.
        :type: StackVersionKibanaConfig
        """

        self._kibana = kibana

    @property
    def metadata(self):
        """
        Gets the metadata of this StackVersionConfigPost.

        :return: The metadata of this StackVersionConfigPost.
        :rtype: StackVersionMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this StackVersionConfigPost.

        :param metadata: The metadata of this StackVersionConfigPost.
        :type: StackVersionMetadata
        """

        self._metadata = metadata

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StackVersionConfigPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
