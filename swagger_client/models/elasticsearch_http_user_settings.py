# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ElasticsearchHttpUserSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compression': 'bool',
        'cors_enabled': 'bool',
        'cors_allow_origin': 'str',
        'cors_max_age': 'int',
        'cors_allow_methods': 'str',
        'cors_allow_headers': 'str',
        'cors_allow_credentials': 'bool'
    }

    attribute_map = {
        'compression': 'compression',
        'cors_enabled': 'cors_enabled',
        'cors_allow_origin': 'cors_allow_origin',
        'cors_max_age': 'cors_max_age',
        'cors_allow_methods': 'cors_allow_methods',
        'cors_allow_headers': 'cors_allow_headers',
        'cors_allow_credentials': 'cors_allow_credentials'
    }

    def __init__(self, compression=None, cors_enabled=None, cors_allow_origin=None, cors_max_age=None, cors_allow_methods=None, cors_allow_headers=None, cors_allow_credentials=None):
        """
        ElasticsearchHttpUserSettings - a model defined in Swagger
        """

        self._compression = None
        self._cors_enabled = None
        self._cors_allow_origin = None
        self._cors_max_age = None
        self._cors_allow_methods = None
        self._cors_allow_headers = None
        self._cors_allow_credentials = None

        if compression is not None:
          self.compression = compression
        if cors_enabled is not None:
          self.cors_enabled = cors_enabled
        if cors_allow_origin is not None:
          self.cors_allow_origin = cors_allow_origin
        if cors_max_age is not None:
          self.cors_max_age = cors_max_age
        if cors_allow_methods is not None:
          self.cors_allow_methods = cors_allow_methods
        if cors_allow_headers is not None:
          self.cors_allow_headers = cors_allow_headers
        if cors_allow_credentials is not None:
          self.cors_allow_credentials = cors_allow_credentials

    @property
    def compression(self):
        """
        Gets the compression of this ElasticsearchHttpUserSettings.
        Controls whether HTTP API responses are compressed (default: true). NOTES: (Corresponds to the parameter 'http.compression')

        :return: The compression of this ElasticsearchHttpUserSettings.
        :rtype: bool
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """
        Sets the compression of this ElasticsearchHttpUserSettings.
        Controls whether HTTP API responses are compressed (default: true). NOTES: (Corresponds to the parameter 'http.compression')

        :param compression: The compression of this ElasticsearchHttpUserSettings.
        :type: bool
        """

        self._compression = compression

    @property
    def cors_enabled(self):
        """
        Gets the cors_enabled of this ElasticsearchHttpUserSettings.
        Enables or disables (default is disabled) CORS support - see CORS documentation. NOTES: (Corresponds to the parameter 'http.cors.enabled')

        :return: The cors_enabled of this ElasticsearchHttpUserSettings.
        :rtype: bool
        """
        return self._cors_enabled

    @cors_enabled.setter
    def cors_enabled(self, cors_enabled):
        """
        Sets the cors_enabled of this ElasticsearchHttpUserSettings.
        Enables or disables (default is disabled) CORS support - see CORS documentation. NOTES: (Corresponds to the parameter 'http.cors.enabled')

        :param cors_enabled: The cors_enabled of this ElasticsearchHttpUserSettings.
        :type: bool
        """

        self._cors_enabled = cors_enabled

    @property
    def cors_allow_origin(self):
        """
        Gets the cors_allow_origin of this ElasticsearchHttpUserSettings.
        Which origins to allow. Defaults to no origins allowed. If you prepend and append a / to the value, this will be treated as a regular expression, allowing you to support HTTP and HTTPs. for example using /https?://localhost(:[0-9]+)?/ would return the request header appropriately in both cases. * is a valid value but is considered a security risk as your elasticsearch instance is open to cross origin requests from anywhere. NOTES: (Corresponds to the parameter 'http.cors.allow-origin')

        :return: The cors_allow_origin of this ElasticsearchHttpUserSettings.
        :rtype: str
        """
        return self._cors_allow_origin

    @cors_allow_origin.setter
    def cors_allow_origin(self, cors_allow_origin):
        """
        Sets the cors_allow_origin of this ElasticsearchHttpUserSettings.
        Which origins to allow. Defaults to no origins allowed. If you prepend and append a / to the value, this will be treated as a regular expression, allowing you to support HTTP and HTTPs. for example using /https?://localhost(:[0-9]+)?/ would return the request header appropriately in both cases. * is a valid value but is considered a security risk as your elasticsearch instance is open to cross origin requests from anywhere. NOTES: (Corresponds to the parameter 'http.cors.allow-origin')

        :param cors_allow_origin: The cors_allow_origin of this ElasticsearchHttpUserSettings.
        :type: str
        """

        self._cors_allow_origin = cors_allow_origin

    @property
    def cors_max_age(self):
        """
        Gets the cors_max_age of this ElasticsearchHttpUserSettings.
        Browsers send a \"preflight\" OPTIONS-request to determine CORS settings. max-age defines how long the result should be cached for. Defaults to 1728000 (20 days). NOTES: (Corresponds to the parameter 'http.cors.max-age')

        :return: The cors_max_age of this ElasticsearchHttpUserSettings.
        :rtype: int
        """
        return self._cors_max_age

    @cors_max_age.setter
    def cors_max_age(self, cors_max_age):
        """
        Sets the cors_max_age of this ElasticsearchHttpUserSettings.
        Browsers send a \"preflight\" OPTIONS-request to determine CORS settings. max-age defines how long the result should be cached for. Defaults to 1728000 (20 days). NOTES: (Corresponds to the parameter 'http.cors.max-age')

        :param cors_max_age: The cors_max_age of this ElasticsearchHttpUserSettings.
        :type: int
        """

        self._cors_max_age = cors_max_age

    @property
    def cors_allow_methods(self):
        """
        Gets the cors_allow_methods of this ElasticsearchHttpUserSettings.
        Which methods to allow. Defaults to \"OPTIONS, HEAD, GET, POST, PUT, DELETE\". NOTES: (The string is inserted into the value for header 'http.cors.allow-methods')

        :return: The cors_allow_methods of this ElasticsearchHttpUserSettings.
        :rtype: str
        """
        return self._cors_allow_methods

    @cors_allow_methods.setter
    def cors_allow_methods(self, cors_allow_methods):
        """
        Sets the cors_allow_methods of this ElasticsearchHttpUserSettings.
        Which methods to allow. Defaults to \"OPTIONS, HEAD, GET, POST, PUT, DELETE\". NOTES: (The string is inserted into the value for header 'http.cors.allow-methods')

        :param cors_allow_methods: The cors_allow_methods of this ElasticsearchHttpUserSettings.
        :type: str
        """

        self._cors_allow_methods = cors_allow_methods

    @property
    def cors_allow_headers(self):
        """
        Gets the cors_allow_headers of this ElasticsearchHttpUserSettings.
        Which headers to allow. Defaults to \"X-Requested-With, Content-Type, Content-Length\". NOTES: (The string is inserted into the value for header 'http.cors.allow-headers')

        :return: The cors_allow_headers of this ElasticsearchHttpUserSettings.
        :rtype: str
        """
        return self._cors_allow_headers

    @cors_allow_headers.setter
    def cors_allow_headers(self, cors_allow_headers):
        """
        Sets the cors_allow_headers of this ElasticsearchHttpUserSettings.
        Which headers to allow. Defaults to \"X-Requested-With, Content-Type, Content-Length\". NOTES: (The string is inserted into the value for header 'http.cors.allow-headers')

        :param cors_allow_headers: The cors_allow_headers of this ElasticsearchHttpUserSettings.
        :type: str
        """

        self._cors_allow_headers = cors_allow_headers

    @property
    def cors_allow_credentials(self):
        """
        Gets the cors_allow_credentials of this ElasticsearchHttpUserSettings.
        Whether the Access-Control-Allow-Credentials header should be returned. Note: This header is only returned, when the setting is set to true. Defaults to false. NOTES: (Corresponds to the parameter 'http.cors.allow-credentials')

        :return: The cors_allow_credentials of this ElasticsearchHttpUserSettings.
        :rtype: bool
        """
        return self._cors_allow_credentials

    @cors_allow_credentials.setter
    def cors_allow_credentials(self, cors_allow_credentials):
        """
        Sets the cors_allow_credentials of this ElasticsearchHttpUserSettings.
        Whether the Access-Control-Allow-Credentials header should be returned. Note: This header is only returned, when the setting is set to true. Defaults to false. NOTES: (Corresponds to the parameter 'http.cors.allow-credentials')

        :param cors_allow_credentials: The cors_allow_credentials of this ElasticsearchHttpUserSettings.
        :type: bool
        """

        self._cors_allow_credentials = cors_allow_credentials

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ElasticsearchHttpUserSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
