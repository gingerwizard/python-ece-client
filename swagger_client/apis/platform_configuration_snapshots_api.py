# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PlatformConfigurationSnapshotsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_snapshot_repository(self, repository_name, **kwargs):
        """
        Delete snapshot repository
        Deletes a snapshot repository configuration by name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_snapshot_repository(repository_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str repository_name: Custom name of a snapshot repository configuration. (required)
        :return: EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_snapshot_repository_with_http_info(repository_name, **kwargs)
        else:
            (data) = self.delete_snapshot_repository_with_http_info(repository_name, **kwargs)
            return data

    def delete_snapshot_repository_with_http_info(self, repository_name, **kwargs):
        """
        Delete snapshot repository
        Deletes a snapshot repository configuration by name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_snapshot_repository_with_http_info(repository_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str repository_name: Custom name of a snapshot repository configuration. (required)
        :return: EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_snapshot_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_name' is set
        if ('repository_name' not in params) or (params['repository_name'] is None):
            raise ValueError("Missing the required parameter `repository_name` when calling `delete_snapshot_repository`")


        collection_formats = {}

        path_params = {}
        if 'repository_name' in params:
            path_params['repository_name'] = params['repository_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/configuration/snapshots/repositories/{repository_name}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmptyResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_snapshot_repositories(self, **kwargs):
        """
        Get snapshot repositories
        Retrieves a list of all available snapshot repository configurations. Privileged access required for configuration contents.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_snapshot_repositories(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: RepositoryConfigs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_snapshot_repositories_with_http_info(**kwargs)
        else:
            (data) = self.get_snapshot_repositories_with_http_info(**kwargs)
            return data

    def get_snapshot_repositories_with_http_info(self, **kwargs):
        """
        Get snapshot repositories
        Retrieves a list of all available snapshot repository configurations. Privileged access required for configuration contents.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_snapshot_repositories_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: RepositoryConfigs
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot_repositories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/configuration/snapshots/repositories', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RepositoryConfigs',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_snapshot_repository(self, repository_name, **kwargs):
        """
        Get snapshot repository
        Retrieve a repository configuration by name. Privileged access required for configuration contents.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_snapshot_repository(repository_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str repository_name: Custom name of a snapshot repository configuration. (required)
        :return: RepositoryConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_snapshot_repository_with_http_info(repository_name, **kwargs)
        else:
            (data) = self.get_snapshot_repository_with_http_info(repository_name, **kwargs)
            return data

    def get_snapshot_repository_with_http_info(self, repository_name, **kwargs):
        """
        Get snapshot repository
        Retrieve a repository configuration by name. Privileged access required for configuration contents.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_snapshot_repository_with_http_info(repository_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str repository_name: Custom name of a snapshot repository configuration. (required)
        :return: RepositoryConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_name' is set
        if ('repository_name' not in params) or (params['repository_name'] is None):
            raise ValueError("Missing the required parameter `repository_name` when calling `get_snapshot_repository`")


        collection_formats = {}

        path_params = {}
        if 'repository_name' in params:
            path_params['repository_name'] = params['repository_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/configuration/snapshots/repositories/{repository_name}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RepositoryConfig',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def set_snapshot_repository(self, repository_name, body, **kwargs):
        """
        Set snapshot repository
        Creates or updates an existing snapshot repository configuration by name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_snapshot_repository(repository_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str repository_name: Custom name of a snapshot repository configuration. (required)
        :param SnapshotRepositoryConfiguration body: The Elasticsearch snapshot repository configuration. (required)
        :param int version: If specified, checks for conflicts against the version of the repository configuration (returned in 'x-cloud-resource-version' of the GET request)
        :return: RepositoryConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_snapshot_repository_with_http_info(repository_name, body, **kwargs)
        else:
            (data) = self.set_snapshot_repository_with_http_info(repository_name, body, **kwargs)
            return data

    def set_snapshot_repository_with_http_info(self, repository_name, body, **kwargs):
        """
        Set snapshot repository
        Creates or updates an existing snapshot repository configuration by name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_snapshot_repository_with_http_info(repository_name, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str repository_name: Custom name of a snapshot repository configuration. (required)
        :param SnapshotRepositoryConfiguration body: The Elasticsearch snapshot repository configuration. (required)
        :param int version: If specified, checks for conflicts against the version of the repository configuration (returned in 'x-cloud-resource-version' of the GET request)
        :return: RepositoryConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_name', 'body', 'version']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_snapshot_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_name' is set
        if ('repository_name' not in params) or (params['repository_name'] is None):
            raise ValueError("Missing the required parameter `repository_name` when calling `set_snapshot_repository`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_snapshot_repository`")


        collection_formats = {}

        path_params = {}
        if 'repository_name' in params:
            path_params['repository_name'] = params['repository_name']

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/configuration/snapshots/repositories/{repository_name}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RepositoryConfig',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
