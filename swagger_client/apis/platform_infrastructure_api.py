# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PlatformInfrastructureApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def delete_allocator(self, allocator_id, **kwargs):
        """
        Delete allocator
        Deletes an allocator by id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_allocator(allocator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: Identifier for the allocator (required)
        :param bool remove_instances: Whether or not to also remove the instances on the allocator that's being deleted.
        :return: EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_allocator_with_http_info(allocator_id, **kwargs)
        else:
            (data) = self.delete_allocator_with_http_info(allocator_id, **kwargs)
            return data

    def delete_allocator_with_http_info(self, allocator_id, **kwargs):
        """
        Delete allocator
        Deletes an allocator by id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_allocator_with_http_info(allocator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: Identifier for the allocator (required)
        :param bool remove_instances: Whether or not to also remove the instances on the allocator that's being deleted.
        :return: EmptyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['allocator_id', 'remove_instances']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_allocator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'allocator_id' is set
        if ('allocator_id' not in params) or (params['allocator_id'] is None):
            raise ValueError("Missing the required parameter `allocator_id` when calling `delete_allocator`")


        collection_formats = {}

        path_params = {}
        if 'allocator_id' in params:
            path_params['allocator_id'] = params['allocator_id']

        query_params = []
        if 'remove_instances' in params:
            query_params.append(('remove_instances', params['remove_instances']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/infrastructure/allocators/{allocator_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EmptyResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_allocator_metadata_item(self, allocator_id, key, **kwargs):
        """
        Delete allocator metadata item
        Removes a single item from a given allocators metadata.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_allocator_metadata_item(allocator_id, key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: The identifier for the allocator. (required)
        :param str key: The key of the metadata item to remove. (required)
        :param int version: If specified, checks for conflicts against the version of the metadata (returned in 'x-cloud-resource-version' of the GET request)
        :return: list[AllocatorMetadataItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_allocator_metadata_item_with_http_info(allocator_id, key, **kwargs)
        else:
            (data) = self.delete_allocator_metadata_item_with_http_info(allocator_id, key, **kwargs)
            return data

    def delete_allocator_metadata_item_with_http_info(self, allocator_id, key, **kwargs):
        """
        Delete allocator metadata item
        Removes a single item from a given allocators metadata.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_allocator_metadata_item_with_http_info(allocator_id, key, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: The identifier for the allocator. (required)
        :param str key: The key of the metadata item to remove. (required)
        :param int version: If specified, checks for conflicts against the version of the metadata (returned in 'x-cloud-resource-version' of the GET request)
        :return: list[AllocatorMetadataItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['allocator_id', 'key', 'version']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_allocator_metadata_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'allocator_id' is set
        if ('allocator_id' not in params) or (params['allocator_id'] is None):
            raise ValueError("Missing the required parameter `allocator_id` when calling `delete_allocator_metadata_item`")
        # verify the required parameter 'key' is set
        if ('key' not in params) or (params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `delete_allocator_metadata_item`")


        collection_formats = {}

        path_params = {}
        if 'allocator_id' in params:
            path_params['allocator_id'] = params['allocator_id']
        if 'key' in params:
            path_params['key'] = params['key']

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/infrastructure/allocators/{allocator_id}/metadata/{key}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AllocatorMetadataItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_allocator(self, allocator_id, **kwargs):
        """
        Get allocator
        Retrieves an allocator by id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_allocator(allocator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: Identifier for the allocator (required)
        :return: AllocatorInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_allocator_with_http_info(allocator_id, **kwargs)
        else:
            (data) = self.get_allocator_with_http_info(allocator_id, **kwargs)
            return data

    def get_allocator_with_http_info(self, allocator_id, **kwargs):
        """
        Get allocator
        Retrieves an allocator by id.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_allocator_with_http_info(allocator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: Identifier for the allocator (required)
        :return: AllocatorInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['allocator_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_allocator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'allocator_id' is set
        if ('allocator_id' not in params) or (params['allocator_id'] is None):
            raise ValueError("Missing the required parameter `allocator_id` when calling `get_allocator`")


        collection_formats = {}

        path_params = {}
        if 'allocator_id' in params:
            path_params['allocator_id'] = params['allocator_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/infrastructure/allocators/{allocator_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AllocatorInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_allocator_metadata(self, allocator_id, **kwargs):
        """
        Get allocator metadata
        Retrieves the metadata for a given allocator.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_allocator_metadata(allocator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: The identifier for the allocator. (required)
        :return: list[AllocatorMetadataItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_allocator_metadata_with_http_info(allocator_id, **kwargs)
        else:
            (data) = self.get_allocator_metadata_with_http_info(allocator_id, **kwargs)
            return data

    def get_allocator_metadata_with_http_info(self, allocator_id, **kwargs):
        """
        Get allocator metadata
        Retrieves the metadata for a given allocator.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_allocator_metadata_with_http_info(allocator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: The identifier for the allocator. (required)
        :return: list[AllocatorMetadataItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['allocator_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_allocator_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'allocator_id' is set
        if ('allocator_id' not in params) or (params['allocator_id'] is None):
            raise ValueError("Missing the required parameter `allocator_id` when calling `get_allocator_metadata`")


        collection_formats = {}

        path_params = {}
        if 'allocator_id' in params:
            path_params['allocator_id'] = params['allocator_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/infrastructure/allocators/{allocator_id}/metadata', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AllocatorMetadataItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_allocator_settings(self, allocator_id, **kwargs):
        """
        Get allocator settings
        Retrieves overridable settings for an allocator.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_allocator_settings(allocator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: Identifier for the allocator (required)
        :return: AllocatorSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_allocator_settings_with_http_info(allocator_id, **kwargs)
        else:
            (data) = self.get_allocator_settings_with_http_info(allocator_id, **kwargs)
            return data

    def get_allocator_settings_with_http_info(self, allocator_id, **kwargs):
        """
        Get allocator settings
        Retrieves overridable settings for an allocator.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_allocator_settings_with_http_info(allocator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: Identifier for the allocator (required)
        :return: AllocatorSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['allocator_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_allocator_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'allocator_id' is set
        if ('allocator_id' not in params) or (params['allocator_id'] is None):
            raise ValueError("Missing the required parameter `allocator_id` when calling `get_allocator_settings`")


        collection_formats = {}

        path_params = {}
        if 'allocator_id' in params:
            path_params['allocator_id'] = params['allocator_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/infrastructure/allocators/{allocator_id}/settings', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AllocatorSettings',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_allocators(self, **kwargs):
        """
        Get allocators
        Retrieves an overview of all allocators in an ECE installation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_allocators(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: An optional query to filter allocators by. Maps to an Elasticsearch query_string query.
        :return: AllocatorOverview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_allocators_with_http_info(**kwargs)
        else:
            (data) = self.get_allocators_with_http_info(**kwargs)
            return data

    def get_allocators_with_http_info(self, **kwargs):
        """
        Get allocators
        Retrieves an overview of all allocators in an ECE installation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_allocators_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: An optional query to filter allocators by. Maps to an Elasticsearch query_string query.
        :return: AllocatorOverview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_allocators" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/infrastructure/allocators', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AllocatorOverview',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def move_clusters(self, allocator_id, **kwargs):
        """
        Move clusters
        Moves clusters off an allocator.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.move_clusters(allocator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: The identifier of the allocator of which to move clusters. (required)
        :param MoveClustersRequest body: Overrides defaults for the move of each cluster
        :param bool force_update: If true, will cancel any pending plans and overwrite with this move plan for all clusters, else will error
        :param bool allocator_down: Tells the infrastructure that all instances on the allocator should be considered as permanently down when deciding how to migrate data to new nodes. If left blank then the system will auto-decide (currently: will treat the allocator as up)
        :param bool validate_only: If true, will validate the plan overrides and return the plan that would be applied, without performing the move.
        :return: MoveClustersCommandResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.move_clusters_with_http_info(allocator_id, **kwargs)
        else:
            (data) = self.move_clusters_with_http_info(allocator_id, **kwargs)
            return data

    def move_clusters_with_http_info(self, allocator_id, **kwargs):
        """
        Move clusters
        Moves clusters off an allocator.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.move_clusters_with_http_info(allocator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: The identifier of the allocator of which to move clusters. (required)
        :param MoveClustersRequest body: Overrides defaults for the move of each cluster
        :param bool force_update: If true, will cancel any pending plans and overwrite with this move plan for all clusters, else will error
        :param bool allocator_down: Tells the infrastructure that all instances on the allocator should be considered as permanently down when deciding how to migrate data to new nodes. If left blank then the system will auto-decide (currently: will treat the allocator as up)
        :param bool validate_only: If true, will validate the plan overrides and return the plan that would be applied, without performing the move.
        :return: MoveClustersCommandResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['allocator_id', 'body', 'force_update', 'allocator_down', 'validate_only']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_clusters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'allocator_id' is set
        if ('allocator_id' not in params) or (params['allocator_id'] is None):
            raise ValueError("Missing the required parameter `allocator_id` when calling `move_clusters`")


        collection_formats = {}

        path_params = {}
        if 'allocator_id' in params:
            path_params['allocator_id'] = params['allocator_id']

        query_params = []
        if 'force_update' in params:
            query_params.append(('force_update', params['force_update']))
        if 'allocator_down' in params:
            query_params.append(('allocator_down', params['allocator_down']))
        if 'validate_only' in params:
            query_params.append(('validate_only', params['validate_only']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/infrastructure/allocators/{allocator_id}/clusters/_move', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MoveClustersCommandResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def move_clusters_by_type(self, allocator_id, cluster_type, **kwargs):
        """
        Move clusters by type
        Moves clusters of a given type off an allocator.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.move_clusters_by_type(allocator_id, cluster_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: The identifier of the allocator of which to move clusters. (required)
        :param str cluster_type: The type of clusters to move off the allocator (either Elasticsearch or Kibana).  If not specified, then all clusters are moved. (required)
        :param MoveClustersRequest body: Overrides defaults for the move of each cluster
        :param bool force_update: If true, will cancel any pending plans and overwrite with this move plan for all clusters, else will error
        :param bool allocator_down: If true all clusters on the allocator will be considered to be permanently down for the purposes of data migration logic
        :param bool validate_only: If true, will validate the plan overrides and return the plan that would be applied, without performing the move.
        :return: MoveClustersCommandResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.move_clusters_by_type_with_http_info(allocator_id, cluster_type, **kwargs)
        else:
            (data) = self.move_clusters_by_type_with_http_info(allocator_id, cluster_type, **kwargs)
            return data

    def move_clusters_by_type_with_http_info(self, allocator_id, cluster_type, **kwargs):
        """
        Move clusters by type
        Moves clusters of a given type off an allocator.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.move_clusters_by_type_with_http_info(allocator_id, cluster_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: The identifier of the allocator of which to move clusters. (required)
        :param str cluster_type: The type of clusters to move off the allocator (either Elasticsearch or Kibana).  If not specified, then all clusters are moved. (required)
        :param MoveClustersRequest body: Overrides defaults for the move of each cluster
        :param bool force_update: If true, will cancel any pending plans and overwrite with this move plan for all clusters, else will error
        :param bool allocator_down: If true all clusters on the allocator will be considered to be permanently down for the purposes of data migration logic
        :param bool validate_only: If true, will validate the plan overrides and return the plan that would be applied, without performing the move.
        :return: MoveClustersCommandResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['allocator_id', 'cluster_type', 'body', 'force_update', 'allocator_down', 'validate_only']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_clusters_by_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'allocator_id' is set
        if ('allocator_id' not in params) or (params['allocator_id'] is None):
            raise ValueError("Missing the required parameter `allocator_id` when calling `move_clusters_by_type`")
        # verify the required parameter 'cluster_type' is set
        if ('cluster_type' not in params) or (params['cluster_type'] is None):
            raise ValueError("Missing the required parameter `cluster_type` when calling `move_clusters_by_type`")


        collection_formats = {}

        path_params = {}
        if 'allocator_id' in params:
            path_params['allocator_id'] = params['allocator_id']
        if 'cluster_type' in params:
            path_params['cluster_type'] = params['cluster_type']

        query_params = []
        if 'force_update' in params:
            query_params.append(('force_update', params['force_update']))
        if 'allocator_down' in params:
            query_params.append(('allocator_down', params['allocator_down']))
        if 'validate_only' in params:
            query_params.append(('validate_only', params['validate_only']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/infrastructure/allocators/{allocator_id}/clusters/{cluster_type}/_move', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MoveClustersCommandResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_allocators(self, **kwargs):
        """
        Search allocators
        Retrieves allocators in an ECE installation that match a given query.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_allocators(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SearchRequest body: The optional search request to execute. If not supplied then all allocators are matched.
        :return: AllocatorOverview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_allocators_with_http_info(**kwargs)
        else:
            (data) = self.search_allocators_with_http_info(**kwargs)
            return data

    def search_allocators_with_http_info(self, **kwargs):
        """
        Search allocators
        Retrieves allocators in an ECE installation that match a given query.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_allocators_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param SearchRequest body: The optional search request to execute. If not supplied then all allocators are matched.
        :return: AllocatorOverview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_allocators" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/infrastructure/allocators/_search', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AllocatorOverview',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def set_allocator_metadata(self, body, allocator_id, **kwargs):
        """
        Set allocator metadata
        Sets the metadata for a given allocator.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_allocator_metadata(body, allocator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AllocatorMetadataItems body: The metadata to update the allocator with. (required)
        :param str allocator_id: The identifier for the allocator. (required)
        :param int version: If specified, checks for conflicts against the version of the metadata (returned in 'x-cloud-resource-version' of the GET request)
        :return: list[AllocatorMetadataItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_allocator_metadata_with_http_info(body, allocator_id, **kwargs)
        else:
            (data) = self.set_allocator_metadata_with_http_info(body, allocator_id, **kwargs)
            return data

    def set_allocator_metadata_with_http_info(self, body, allocator_id, **kwargs):
        """
        Set allocator metadata
        Sets the metadata for a given allocator.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_allocator_metadata_with_http_info(body, allocator_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AllocatorMetadataItems body: The metadata to update the allocator with. (required)
        :param str allocator_id: The identifier for the allocator. (required)
        :param int version: If specified, checks for conflicts against the version of the metadata (returned in 'x-cloud-resource-version' of the GET request)
        :return: list[AllocatorMetadataItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocator_id', 'version']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_allocator_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_allocator_metadata`")
        # verify the required parameter 'allocator_id' is set
        if ('allocator_id' not in params) or (params['allocator_id'] is None):
            raise ValueError("Missing the required parameter `allocator_id` when calling `set_allocator_metadata`")


        collection_formats = {}

        path_params = {}
        if 'allocator_id' in params:
            path_params['allocator_id'] = params['allocator_id']

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/infrastructure/allocators/{allocator_id}/metadata', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AllocatorMetadataItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def set_allocator_metadata_item(self, allocator_id, key, body, **kwargs):
        """
        Set allocator metadata item
        Adds or updates a single item to a given allocators metadata.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_allocator_metadata_item(allocator_id, key, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: The identifier for the allocator. (required)
        :param str key: The key of the metadata item to add or update. (required)
        :param AllocatorMetadataItemValue body: The value of the metadata item to add or update. (required)
        :param int version: If specified, checks for conflicts against the version of the metadata (returned in 'x-cloud-resource-version' of the GET request)
        :return: list[AllocatorMetadataItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_allocator_metadata_item_with_http_info(allocator_id, key, body, **kwargs)
        else:
            (data) = self.set_allocator_metadata_item_with_http_info(allocator_id, key, body, **kwargs)
            return data

    def set_allocator_metadata_item_with_http_info(self, allocator_id, key, body, **kwargs):
        """
        Set allocator metadata item
        Adds or updates a single item to a given allocators metadata.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_allocator_metadata_item_with_http_info(allocator_id, key, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: The identifier for the allocator. (required)
        :param str key: The key of the metadata item to add or update. (required)
        :param AllocatorMetadataItemValue body: The value of the metadata item to add or update. (required)
        :param int version: If specified, checks for conflicts against the version of the metadata (returned in 'x-cloud-resource-version' of the GET request)
        :return: list[AllocatorMetadataItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['allocator_id', 'key', 'body', 'version']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_allocator_metadata_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'allocator_id' is set
        if ('allocator_id' not in params) or (params['allocator_id'] is None):
            raise ValueError("Missing the required parameter `allocator_id` when calling `set_allocator_metadata_item`")
        # verify the required parameter 'key' is set
        if ('key' not in params) or (params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `set_allocator_metadata_item`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_allocator_metadata_item`")


        collection_formats = {}

        path_params = {}
        if 'allocator_id' in params:
            path_params['allocator_id'] = params['allocator_id']
        if 'key' in params:
            path_params['key'] = params['key']

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/infrastructure/allocators/{allocator_id}/metadata/{key}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[AllocatorMetadataItem]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def set_allocator_settings(self, allocator_id, body, **kwargs):
        """
        Set allocator settings
        Overwrites the entire settings for an allocator with the settings supplied, any fields not referenced here will be deleted.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_allocator_settings(allocator_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: Identifier for the allocator (required)
        :param AllocatorSettings body: The allocator settings to apply. (required)
        :param int version: If specified, checks for conflicts against the version of the settings (returned in 'x-cloud-resource-version' of the GET request)
        :return: AllocatorSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.set_allocator_settings_with_http_info(allocator_id, body, **kwargs)
        else:
            (data) = self.set_allocator_settings_with_http_info(allocator_id, body, **kwargs)
            return data

    def set_allocator_settings_with_http_info(self, allocator_id, body, **kwargs):
        """
        Set allocator settings
        Overwrites the entire settings for an allocator with the settings supplied, any fields not referenced here will be deleted.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.set_allocator_settings_with_http_info(allocator_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: Identifier for the allocator (required)
        :param AllocatorSettings body: The allocator settings to apply. (required)
        :param int version: If specified, checks for conflicts against the version of the settings (returned in 'x-cloud-resource-version' of the GET request)
        :return: AllocatorSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['allocator_id', 'body', 'version']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_allocator_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'allocator_id' is set
        if ('allocator_id' not in params) or (params['allocator_id'] is None):
            raise ValueError("Missing the required parameter `allocator_id` when calling `set_allocator_settings`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_allocator_settings`")


        collection_formats = {}

        path_params = {}
        if 'allocator_id' in params:
            path_params['allocator_id'] = params['allocator_id']

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/infrastructure/allocators/{allocator_id}/settings', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AllocatorSettings',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_allocator_settings(self, allocator_id, body, **kwargs):
        """
        Update allocator settings
        Applies the provided settings as a patch - fields not referenced in this update will not be altered.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_allocator_settings(allocator_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: Identifier for the allocator (required)
        :param AllocatorSettings body: The allocator settings to update. (required)
        :param int version: If specified, checks for conflicts against the version of the repository configuration (returned in 'x-cloud-resource-version' of the GET request)
        :return: AllocatorSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_allocator_settings_with_http_info(allocator_id, body, **kwargs)
        else:
            (data) = self.update_allocator_settings_with_http_info(allocator_id, body, **kwargs)
            return data

    def update_allocator_settings_with_http_info(self, allocator_id, body, **kwargs):
        """
        Update allocator settings
        Applies the provided settings as a patch - fields not referenced in this update will not be altered.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_allocator_settings_with_http_info(allocator_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str allocator_id: Identifier for the allocator (required)
        :param AllocatorSettings body: The allocator settings to update. (required)
        :param int version: If specified, checks for conflicts against the version of the repository configuration (returned in 'x-cloud-resource-version' of the GET request)
        :return: AllocatorSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['allocator_id', 'body', 'version']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_allocator_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'allocator_id' is set
        if ('allocator_id' not in params) or (params['allocator_id'] is None):
            raise ValueError("Missing the required parameter `allocator_id` when calling `update_allocator_settings`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_allocator_settings`")


        collection_formats = {}

        path_params = {}
        if 'allocator_id' in params:
            path_params['allocator_id'] = params['allocator_id']

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['apiKey', 'basicAuth']

        return self.api_client.call_api('/platform/infrastructure/allocators/{allocator_id}/settings', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AllocatorSettings',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
